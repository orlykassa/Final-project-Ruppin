{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "MOST_UPDATED(1) (1).ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "09uilIMSMUIV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dff1e7f6-5b07-46d3-c58b-5477689cbeae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ]
        }
      ],
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data frame \n",
        "#visualization\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px #more common and simple use\n",
        "import plotly.graph_objects as go #work moslty on graph objects (more heavy and dynamic) easier to control\n",
        "import warnings\n",
        "from pylab import rcParams\n",
        "from scipy.stats import f_oneway\n",
        "from scipy.stats import ttest_ind\n",
        "from statsmodels.stats.weightstats import ztest as ztest\n",
        "import scipy.stats as stats\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import scipy\n",
        "plt.style.use('seaborn-deep')\n",
        "import plotly.graph_objects as go\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import roc_auc_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final= pd.read_csv('https://raw.githubusercontent.com/orlykassa/DATA/main/data.csv')"
      ],
      "metadata": {
        "id": "O6IIaWujMUuj"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.drop(['Unnamed: 0'] , axis=1 ,inplace=True)\n"
      ],
      "metadata": {
        "id": "HWKr2E00MU2W"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# התפלגות פיצ'רים\n",
        "def draw_histograms(dataframe, features, rows, cols):\n",
        "    fig=plt.figure(figsize=(20,20))\n",
        "    for i, feature in enumerate(features):\n",
        "        ax=fig.add_subplot(rows,cols,i+1)\n",
        "        dataframe[feature].hist(bins=20,ax=ax,facecolor='midnightblue')\n",
        "        ax.set_title(feature+\" Distribution\",color='DarkRed')\n",
        "        \n",
        "    fig.tight_layout()  \n",
        "    plt.show()\n",
        "#draw_histograms(df_final,df_final.columns,5,3)"
      ],
      "metadata": {
        "id": "KE5N-zmv4oR9"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "corr_df=df_final.corr()"
      ],
      "metadata": {
        "id": "-XEnvQIiM1Dj"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# קורלציה בין משתנים \n",
        "corrmat = df_final.corr()\n",
        "top_corr_features = corrmat.index\n",
        "plt.figure(figsize=(20,20))\n",
        "#plot heat map\n",
        "g=sns.heatmap(df_final[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")\n",
        "# למרות שישנה קורלציה גבוהה החלטנו לבחון את המודלים עם הפיצ'רים בקורלציה ורק לאחר מכן לבחון את המודל הנבחר ולהעריכו ללא הפיצ'רים"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "PkvaMCN7-XYH",
        "outputId": "a19072ed-5094-414f-926a-ffdef5637df2"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x1440 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Linear** **Regression**"
      ],
      "metadata": {
        "id": "0_SS4x5T-l50"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X =df_final.drop(['immigration_balance'], axis =1)\n",
        "y =df_final.immigration_balance"
      ],
      "metadata": {
        "id": "msHkMcX5M4QJ"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#split the data -regression \n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1234)\n",
        "train_df = pd.merge(left=X_train, right=y_train, left_index=True, right_index=True)\n",
        "test_df = pd.merge(left=X_test, right=y_test, left_index=True, right_index=True)\n",
        "train_df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 514
        },
        "id": "wwMc-01oM4Sl",
        "outputId": "f1d59760-ddac-49cd-90dc-8d9ec41676fd"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Rates collection  Percentage of accumulated deficit from income  \\\n",
              "230          108412.0                                       0.150000   \n",
              "405          627196.0                                       0.020100   \n",
              "253           56854.0                                       0.190000   \n",
              "202          128180.0                                       0.130000   \n",
              "583           93225.0                                       0.090929   \n",
              "502           50603.0                                       0.086247   \n",
              "537           27811.0                                       0.022656   \n",
              "6             36735.0                                       0.150000   \n",
              "443           78505.0                                       0.137424   \n",
              "557           18386.0                                       0.138777   \n",
              "\n",
              "     Average per capita expenditure in NIS  Education   Welfare  \\\n",
              "230                            6958.230000   105712.0   14627.0   \n",
              "405                            5792.193995   413941.0  186055.0   \n",
              "253                            7710.720000    51488.0   23518.0   \n",
              "202                            7285.060000   121298.0   42822.0   \n",
              "583                            9540.278970    50649.0   41351.0   \n",
              "502                            6180.747922    96736.0   72320.0   \n",
              "537                            4295.755208    28761.0   15080.0   \n",
              "6                              5697.950000    51134.0   22501.0   \n",
              "443                            4398.010753   125218.0   50531.0   \n",
              "557                            4689.028630    34257.0   18865.0   \n",
              "\n",
              "     Total income from the government  Total expenses  Total income  \\\n",
              "230                           93502.0        272576.0      272576.0   \n",
              "405                          385151.0       1512569.0     1465831.0   \n",
              "253                           86220.0        173430.0      173430.0   \n",
              "202                          153561.0        389838.0      389838.0   \n",
              "583                           97397.0        444577.0      428167.0   \n",
              "502                          168139.0        446250.0      467961.0   \n",
              "537                           59351.0        164957.0      155234.0   \n",
              "6                            109825.0        173620.0      169170.0   \n",
              "443                           89163.0        388032.0      379075.0   \n",
              "557                           67098.0        178745.0      178986.0   \n",
              "\n",
              "     Surplus or deficit per year  Development Work  \\\n",
              "230                       -184.0           30208.0   \n",
              "405                       1239.0          155977.0   \n",
              "253                       1420.0           33021.0   \n",
              "202                         14.0           20124.0   \n",
              "583                     -34452.0           46051.0   \n",
              "502                      28441.0           78040.0   \n",
              "537                      -1586.0           47845.0   \n",
              "6                         5059.0            8878.0   \n",
              "443                     -38712.0           49005.0   \n",
              "557                        968.0           14078.0   \n",
              "\n",
              "     Socioeconomic cluster from 1 to 10 lowest 1  \\\n",
              "230                                            8   \n",
              "405                                            5   \n",
              "253                                            3   \n",
              "202                                            4   \n",
              "583                                            4   \n",
              "502                                            4   \n",
              "537                                            2   \n",
              "6                                              3   \n",
              "443                                            3   \n",
              "557                                            3   \n",
              "\n",
              "     Percentage of eligible for a Bagrut  \\\n",
              "230                                 88.6   \n",
              "405                                 58.4   \n",
              "253                                 61.2   \n",
              "202                                 72.5   \n",
              "583                                 47.4   \n",
              "502                                 51.6   \n",
              "537                                 29.0   \n",
              "6                                   46.2   \n",
              "443                                 52.9   \n",
              "557                                 41.5   \n",
              "\n",
              "     Gini Index of Inequality Index 0 Full Equality  \\\n",
              "230                                          0.4584   \n",
              "405                                          0.4215   \n",
              "253                                          0.3660   \n",
              "202                                          0.3785   \n",
              "583                                          0.3745   \n",
              "502                                          0.3615   \n",
              "537                                          0.3890   \n",
              "6                                            0.3799   \n",
              "443                                          0.3768   \n",
              "557                                          0.3542   \n",
              "\n",
              "     Compactness Cluster from 1 to 10 1 highest  immigration_balance  \n",
              "230                                           2                283.0  \n",
              "405                                           7              -1730.0  \n",
              "253                                           1               -148.0  \n",
              "202                                           7               -372.0  \n",
              "583                                           7               -444.0  \n",
              "502                                           4               -710.0  \n",
              "537                                           3                273.0  \n",
              "6                                             3                422.0  \n",
              "443                                           5               -545.0  \n",
              "557                                           5                 36.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a180a59-0da1-4c12-83f3-94ec22f64d95\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rates collection</th>\n",
              "      <th>Percentage of accumulated deficit from income</th>\n",
              "      <th>Average per capita expenditure in NIS</th>\n",
              "      <th>Education</th>\n",
              "      <th>Welfare</th>\n",
              "      <th>Total income from the government</th>\n",
              "      <th>Total expenses</th>\n",
              "      <th>Total income</th>\n",
              "      <th>Surplus or deficit per year</th>\n",
              "      <th>Development Work</th>\n",
              "      <th>Socioeconomic cluster from 1 to 10 lowest 1</th>\n",
              "      <th>Percentage of eligible for a Bagrut</th>\n",
              "      <th>Gini Index of Inequality Index 0 Full Equality</th>\n",
              "      <th>Compactness Cluster from 1 to 10 1 highest</th>\n",
              "      <th>immigration_balance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>230</th>\n",
              "      <td>108412.0</td>\n",
              "      <td>0.150000</td>\n",
              "      <td>6958.230000</td>\n",
              "      <td>105712.0</td>\n",
              "      <td>14627.0</td>\n",
              "      <td>93502.0</td>\n",
              "      <td>272576.0</td>\n",
              "      <td>272576.0</td>\n",
              "      <td>-184.0</td>\n",
              "      <td>30208.0</td>\n",
              "      <td>8</td>\n",
              "      <td>88.6</td>\n",
              "      <td>0.4584</td>\n",
              "      <td>2</td>\n",
              "      <td>283.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>405</th>\n",
              "      <td>627196.0</td>\n",
              "      <td>0.020100</td>\n",
              "      <td>5792.193995</td>\n",
              "      <td>413941.0</td>\n",
              "      <td>186055.0</td>\n",
              "      <td>385151.0</td>\n",
              "      <td>1512569.0</td>\n",
              "      <td>1465831.0</td>\n",
              "      <td>1239.0</td>\n",
              "      <td>155977.0</td>\n",
              "      <td>5</td>\n",
              "      <td>58.4</td>\n",
              "      <td>0.4215</td>\n",
              "      <td>7</td>\n",
              "      <td>-1730.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>253</th>\n",
              "      <td>56854.0</td>\n",
              "      <td>0.190000</td>\n",
              "      <td>7710.720000</td>\n",
              "      <td>51488.0</td>\n",
              "      <td>23518.0</td>\n",
              "      <td>86220.0</td>\n",
              "      <td>173430.0</td>\n",
              "      <td>173430.0</td>\n",
              "      <td>1420.0</td>\n",
              "      <td>33021.0</td>\n",
              "      <td>3</td>\n",
              "      <td>61.2</td>\n",
              "      <td>0.3660</td>\n",
              "      <td>1</td>\n",
              "      <td>-148.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>128180.0</td>\n",
              "      <td>0.130000</td>\n",
              "      <td>7285.060000</td>\n",
              "      <td>121298.0</td>\n",
              "      <td>42822.0</td>\n",
              "      <td>153561.0</td>\n",
              "      <td>389838.0</td>\n",
              "      <td>389838.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>20124.0</td>\n",
              "      <td>4</td>\n",
              "      <td>72.5</td>\n",
              "      <td>0.3785</td>\n",
              "      <td>7</td>\n",
              "      <td>-372.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>583</th>\n",
              "      <td>93225.0</td>\n",
              "      <td>0.090929</td>\n",
              "      <td>9540.278970</td>\n",
              "      <td>50649.0</td>\n",
              "      <td>41351.0</td>\n",
              "      <td>97397.0</td>\n",
              "      <td>444577.0</td>\n",
              "      <td>428167.0</td>\n",
              "      <td>-34452.0</td>\n",
              "      <td>46051.0</td>\n",
              "      <td>4</td>\n",
              "      <td>47.4</td>\n",
              "      <td>0.3745</td>\n",
              "      <td>7</td>\n",
              "      <td>-444.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>50603.0</td>\n",
              "      <td>0.086247</td>\n",
              "      <td>6180.747922</td>\n",
              "      <td>96736.0</td>\n",
              "      <td>72320.0</td>\n",
              "      <td>168139.0</td>\n",
              "      <td>446250.0</td>\n",
              "      <td>467961.0</td>\n",
              "      <td>28441.0</td>\n",
              "      <td>78040.0</td>\n",
              "      <td>4</td>\n",
              "      <td>51.6</td>\n",
              "      <td>0.3615</td>\n",
              "      <td>4</td>\n",
              "      <td>-710.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537</th>\n",
              "      <td>27811.0</td>\n",
              "      <td>0.022656</td>\n",
              "      <td>4295.755208</td>\n",
              "      <td>28761.0</td>\n",
              "      <td>15080.0</td>\n",
              "      <td>59351.0</td>\n",
              "      <td>164957.0</td>\n",
              "      <td>155234.0</td>\n",
              "      <td>-1586.0</td>\n",
              "      <td>47845.0</td>\n",
              "      <td>2</td>\n",
              "      <td>29.0</td>\n",
              "      <td>0.3890</td>\n",
              "      <td>3</td>\n",
              "      <td>273.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>36735.0</td>\n",
              "      <td>0.150000</td>\n",
              "      <td>5697.950000</td>\n",
              "      <td>51134.0</td>\n",
              "      <td>22501.0</td>\n",
              "      <td>109825.0</td>\n",
              "      <td>173620.0</td>\n",
              "      <td>169170.0</td>\n",
              "      <td>5059.0</td>\n",
              "      <td>8878.0</td>\n",
              "      <td>3</td>\n",
              "      <td>46.2</td>\n",
              "      <td>0.3799</td>\n",
              "      <td>3</td>\n",
              "      <td>422.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>443</th>\n",
              "      <td>78505.0</td>\n",
              "      <td>0.137424</td>\n",
              "      <td>4398.010753</td>\n",
              "      <td>125218.0</td>\n",
              "      <td>50531.0</td>\n",
              "      <td>89163.0</td>\n",
              "      <td>388032.0</td>\n",
              "      <td>379075.0</td>\n",
              "      <td>-38712.0</td>\n",
              "      <td>49005.0</td>\n",
              "      <td>3</td>\n",
              "      <td>52.9</td>\n",
              "      <td>0.3768</td>\n",
              "      <td>5</td>\n",
              "      <td>-545.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>557</th>\n",
              "      <td>18386.0</td>\n",
              "      <td>0.138777</td>\n",
              "      <td>4689.028630</td>\n",
              "      <td>34257.0</td>\n",
              "      <td>18865.0</td>\n",
              "      <td>67098.0</td>\n",
              "      <td>178745.0</td>\n",
              "      <td>178986.0</td>\n",
              "      <td>968.0</td>\n",
              "      <td>14078.0</td>\n",
              "      <td>3</td>\n",
              "      <td>41.5</td>\n",
              "      <td>0.3542</td>\n",
              "      <td>5</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a180a59-0da1-4c12-83f3-94ec22f64d95')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8a180a59-0da1-4c12-83f3-94ec22f64d95 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8a180a59-0da1-4c12-83f3-94ec22f64d95');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#scale the sets\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "x_train_scaler = StandardScaler()\n",
        "x_test_scaler = StandardScaler()\n",
        "y_train_scaler = StandardScaler()\n",
        "y_test_scaler = StandardScaler()\n",
        "\n",
        "X_train_scaled = x_train_scaler.fit_transform(X_train)\n",
        "X_test_scaled = x_test_scaler.fit_transform(X_test)\n",
        "y_train_scaled = y_train_scaler.fit_transform(pd.DataFrame(y_train))\n",
        "y_test_scaled = y_test_scaler.fit_transform(pd.DataFrame(y_test))"
      ],
      "metadata": {
        "id": "p3tR9qMJM4VM"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "col=df_final.columns\n",
        "colm = np.asarray(col)\n",
        "colm\n",
        "colm_new = np.delete(colm, 10)\n",
        "colm_new"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QvKJXRFYM4bS",
        "outputId": "f61ea736-86f0-4245-c0b5-075e05f9a10a"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Rates collection',\n",
              "       'Percentage of accumulated deficit from income',\n",
              "       'Average per capita expenditure in NIS', 'Education', 'Welfare',\n",
              "       'Total income from the government', 'Total expenses',\n",
              "       'Total income', 'Surplus or deficit per year', 'Development Work',\n",
              "       'Socioeconomic cluster from 1 to 10 lowest 1',\n",
              "       'Percentage of eligible for a Bagrut',\n",
              "       'Gini Index of Inequality Index 0 Full Equality',\n",
              "       'Compactness Cluster from 1 to 10 1 highest'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "lm = LinearRegression()  # define our model using least square method\n",
        "lm.fit(X_train_scaled,y_train_scaled)              # Fit our linear model\n",
        "# The coefficients\n",
        "coeff = lm.coef_[0]\n",
        "intercept = lm.intercept_[0]\n",
        "print('Coefficients: \\n', \"coeff =\", coeff , \",  Intercept=\",intercept,\"\\n\" )\n",
        "print(\"The regression equation is:\" ,\"immigration_balance = \" ,intercept,\" + \",coeff[0],\" * \",colm_new[0],\n",
        "      \" + \",coeff[1],\" * \",colm_new[1],\" + \",coeff[2],\" * \",colm_new[2],\" + \",coeff[3],\" * \",colm_new[3],\" + \",coeff[4],\"* \",colm_new[4]\n",
        "     ,\" + \",coeff[5],\"* \",colm_new[5],\" + \",coeff[6],\"* \",colm_new[6],\" + \",coeff[7],\"* \",colm_new[7],\" + \",coeff[8],\"* \",colm_new[8]\n",
        "     ,\" + \",coeff[9],\"* \",colm_new[9],\" + \",coeff[10],\"* \",colm_new[10],\" + \",coeff[11],\"* \",colm_new[11],\" + \",coeff[12],\"* \",colm_new[12]\n",
        "     ,\" + \",coeff[13],\"* \",colm_new[13] )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "90vrm9BrM4fC",
        "outputId": "5e875c20-31bb-430b-9753-b8f90a18f5ee"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: \n",
            " coeff = [-0.51307764 -0.04960319 -0.09866531  0.7326709  -1.45145396 -1.11689776\n",
            "  3.19668032 -1.46825481 -0.08174721  0.04230442 -0.1517841   0.03822485\n",
            "  0.14059947  0.12377041] ,  Intercept= 1.970829678139118e-16 \n",
            "\n",
            "The regression equation is: immigration_balance =  1.970829678139118e-16  +  -0.5130776362635072  *  Rates collection  +  -0.049603190109606746  *  Percentage of accumulated deficit from income  +  -0.09866530827890314  *  Average per capita expenditure in NIS  +  0.7326709044131985  *  Education  +  -1.4514539638170412 *  Welfare  +  -1.1168977648639018 *  Total income from the government  +  3.1966803162270243 *  Total expenses  +  -1.46825480703594 *  Total income  +  -0.08174721150201507 *  Surplus or deficit per year  +  0.04230442206656103 *  Development Work  +  -0.15178409690252118 *  Socioeconomic cluster from 1 to 10 lowest 1  +  0.038224846384559794 *  Percentage of eligible for a Bagrut  +  0.14059946613954136 *  Gini Index of Inequality Index 0 Full Equality  +  0.12377041008074163 *  Compactness Cluster from 1 to 10 1 highest\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#use lm.predict()\n",
        "fitted_scaled_immigration = lm.predict(X_train_scaled) # returns ndarray\n",
        "\n",
        "#inverse the scaler transformation\n",
        "fitted_immigration = y_train_scaler.inverse_transform(fitted_scaled_immigration)\n",
        "#fitted_immigration"
      ],
      "metadata": {
        "id": "JH7wU53QM4hq"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#create a pandas series of the results\n",
        "predicted_train_immigration= round(pd.Series(fitted_immigration[:,0], index= y_train.index, name='predicted_train_immigration'), ndigits =2)\n",
        "predicted_train_immigration"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5o92F2fXORwt",
        "outputId": "ceb5622b-1862-4f95-8a51-beebe5ed00d5"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "230    282.74\n",
              "405   -950.97\n",
              "253   -381.19\n",
              "202    -88.31\n",
              "583    183.48\n",
              "        ...  \n",
              "279   -679.34\n",
              "372    513.19\n",
              "204    190.23\n",
              "53     164.42\n",
              "294    370.98\n",
              "Name: predicted_train_immigration, Length: 419, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Add the results to the DF\n",
        "train_df = pd.merge(left=train_df, right=predicted_train_immigration , left_index=True, right_index=True)"
      ],
      "metadata": {
        "id": "1ZBZj4nFOR3t"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fitted_scaled_immigration = lm.predict(X_test_scaled)\n",
        "fitted_immigration = y_test_scaler.inverse_transform(fitted_scaled_immigration)\n",
        "predicted_test_immigration = round(pd.Series(fitted_immigration[:,0], index=y_test.index, name='predicted_test_immigration'),ndigits=2)\n",
        "test_df = pd.merge(left=test_df, right=predicted_test_immigration, left_index=True, right_index=True)\n",
        "test_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "NjEzaE_aOR57",
        "outputId": "dc264b07-180a-4b4e-cf8d-e8bc99250a96"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Rates collection  Percentage of accumulated deficit from income  \\\n",
              "569          130409.0                                       0.149034   \n",
              "380          288654.0                                       0.035797   \n",
              "457          132595.0                                       0.035735   \n",
              "66            69256.0                                       0.070000   \n",
              "62           314938.0                                       0.110000   \n",
              "..                ...                                            ...   \n",
              "129         1971242.0                                       0.060000   \n",
              "152           68969.0                                       0.100000   \n",
              "168           43951.0                                       0.080000   \n",
              "67            71459.0                                       0.055000   \n",
              "554          420164.0                                       0.013367   \n",
              "\n",
              "     Average per capita expenditure in NIS  Education   Welfare  \\\n",
              "569                            5206.420455    79913.0   58587.0   \n",
              "380                            7750.327784   375267.0  153235.0   \n",
              "457                            6144.138577   109279.0   30072.0   \n",
              "66                             5843.010000    51223.0   10200.0   \n",
              "62                             5336.650000   224446.0  111488.0   \n",
              "..                                     ...        ...       ...   \n",
              "129                            5202.200000  1466675.0  530056.0   \n",
              "152                            6349.210000    62922.0   21304.0   \n",
              "168                            5540.870000    31782.0   13786.0   \n",
              "67                             5988.660000    55169.0   10457.0   \n",
              "554                            5301.002755   262917.0  103841.0   \n",
              "\n",
              "     Total income from the government  Total expenses  Total income  \\\n",
              "569                          151364.0        366532.0      387099.0   \n",
              "380                          340787.0       1489613.0     1351865.0   \n",
              "457                          118389.0        457485.0      413941.0   \n",
              "66                            34021.0        150856.0      150856.0   \n",
              "62                           344453.0        840217.0      840217.0   \n",
              "..                                ...             ...           ...   \n",
              "129                         1912338.0       5175500.0     5175500.0   \n",
              "152                           84447.0        180654.0      180686.0   \n",
              "168                           67372.0        135031.0      135668.0   \n",
              "67                            37494.0        159238.0      159238.0   \n",
              "554                          243215.0        962132.0      979277.0   \n",
              "\n",
              "     Surplus or deficit per year  Development Work  \\\n",
              "569                       3650.0           38908.0   \n",
              "380                     -10404.0          316662.0   \n",
              "457                        498.0          111573.0   \n",
              "66                         914.0          116227.0   \n",
              "62                        -126.0          119646.0   \n",
              "..                           ...               ...   \n",
              "129                       -224.0          145686.0   \n",
              "152                        -32.0            3612.0   \n",
              "168                       -637.0            2579.0   \n",
              "67                        1411.0          144103.0   \n",
              "554                       1974.0           55703.0   \n",
              "\n",
              "     Socioeconomic cluster from 1 to 10 lowest 1  \\\n",
              "569                                            4   \n",
              "380                                            5   \n",
              "457                                            5   \n",
              "66                                             8   \n",
              "62                                             5   \n",
              "..                                           ...   \n",
              "129                                            3   \n",
              "152                                            4   \n",
              "168                                            5   \n",
              "67                                             8   \n",
              "554                                            5   \n",
              "\n",
              "     Percentage of eligible for a Bagrut  \\\n",
              "569                            37.500000   \n",
              "380                            65.900000   \n",
              "457                            72.700000   \n",
              "66                             87.800000   \n",
              "62                             74.300000   \n",
              "..                                   ...   \n",
              "129                            37.100000   \n",
              "152                            55.800000   \n",
              "168                            64.300000   \n",
              "67                             91.267606   \n",
              "554                            68.300000   \n",
              "\n",
              "     Gini Index of Inequality Index 0 Full Equality  \\\n",
              "569                                        0.357000   \n",
              "380                                        0.423900   \n",
              "457                                        0.427900   \n",
              "66                                         0.457900   \n",
              "62                                         0.364900   \n",
              "..                                              ...   \n",
              "129                                        0.433100   \n",
              "152                                        0.376200   \n",
              "168                                        0.378600   \n",
              "67                                         0.469044   \n",
              "554                                        0.406600   \n",
              "\n",
              "     Compactness Cluster from 1 to 10 1 highest  immigration_balance  \\\n",
              "569                                           4               -810.0   \n",
              "380                                           9                720.0   \n",
              "457                                           8                208.0   \n",
              "66                                            3               -269.0   \n",
              "62                                            3              -2113.0   \n",
              "..                                          ...                  ...   \n",
              "129                                          10              -7952.0   \n",
              "152                                           4               -126.0   \n",
              "168                                           5               -207.0   \n",
              "67                                            3               -127.0   \n",
              "554                                           5                465.0   \n",
              "\n",
              "     predicted_test_immigration  \n",
              "569                    -1163.18  \n",
              "380                      971.38  \n",
              "457                      893.36  \n",
              "66                       237.10  \n",
              "62                     -1690.95  \n",
              "..                          ...  \n",
              "129                    -4384.62  \n",
              "152                     -284.09  \n",
              "168                     -141.91  \n",
              "67                       329.48  \n",
              "554                     -393.14  \n",
              "\n",
              "[180 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f828e136-64d9-4757-91e7-b7ef4c49cf11\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rates collection</th>\n",
              "      <th>Percentage of accumulated deficit from income</th>\n",
              "      <th>Average per capita expenditure in NIS</th>\n",
              "      <th>Education</th>\n",
              "      <th>Welfare</th>\n",
              "      <th>Total income from the government</th>\n",
              "      <th>Total expenses</th>\n",
              "      <th>Total income</th>\n",
              "      <th>Surplus or deficit per year</th>\n",
              "      <th>Development Work</th>\n",
              "      <th>Socioeconomic cluster from 1 to 10 lowest 1</th>\n",
              "      <th>Percentage of eligible for a Bagrut</th>\n",
              "      <th>Gini Index of Inequality Index 0 Full Equality</th>\n",
              "      <th>Compactness Cluster from 1 to 10 1 highest</th>\n",
              "      <th>immigration_balance</th>\n",
              "      <th>predicted_test_immigration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>569</th>\n",
              "      <td>130409.0</td>\n",
              "      <td>0.149034</td>\n",
              "      <td>5206.420455</td>\n",
              "      <td>79913.0</td>\n",
              "      <td>58587.0</td>\n",
              "      <td>151364.0</td>\n",
              "      <td>366532.0</td>\n",
              "      <td>387099.0</td>\n",
              "      <td>3650.0</td>\n",
              "      <td>38908.0</td>\n",
              "      <td>4</td>\n",
              "      <td>37.500000</td>\n",
              "      <td>0.357000</td>\n",
              "      <td>4</td>\n",
              "      <td>-810.0</td>\n",
              "      <td>-1163.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>380</th>\n",
              "      <td>288654.0</td>\n",
              "      <td>0.035797</td>\n",
              "      <td>7750.327784</td>\n",
              "      <td>375267.0</td>\n",
              "      <td>153235.0</td>\n",
              "      <td>340787.0</td>\n",
              "      <td>1489613.0</td>\n",
              "      <td>1351865.0</td>\n",
              "      <td>-10404.0</td>\n",
              "      <td>316662.0</td>\n",
              "      <td>5</td>\n",
              "      <td>65.900000</td>\n",
              "      <td>0.423900</td>\n",
              "      <td>9</td>\n",
              "      <td>720.0</td>\n",
              "      <td>971.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>457</th>\n",
              "      <td>132595.0</td>\n",
              "      <td>0.035735</td>\n",
              "      <td>6144.138577</td>\n",
              "      <td>109279.0</td>\n",
              "      <td>30072.0</td>\n",
              "      <td>118389.0</td>\n",
              "      <td>457485.0</td>\n",
              "      <td>413941.0</td>\n",
              "      <td>498.0</td>\n",
              "      <td>111573.0</td>\n",
              "      <td>5</td>\n",
              "      <td>72.700000</td>\n",
              "      <td>0.427900</td>\n",
              "      <td>8</td>\n",
              "      <td>208.0</td>\n",
              "      <td>893.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>69256.0</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>5843.010000</td>\n",
              "      <td>51223.0</td>\n",
              "      <td>10200.0</td>\n",
              "      <td>34021.0</td>\n",
              "      <td>150856.0</td>\n",
              "      <td>150856.0</td>\n",
              "      <td>914.0</td>\n",
              "      <td>116227.0</td>\n",
              "      <td>8</td>\n",
              "      <td>87.800000</td>\n",
              "      <td>0.457900</td>\n",
              "      <td>3</td>\n",
              "      <td>-269.0</td>\n",
              "      <td>237.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>314938.0</td>\n",
              "      <td>0.110000</td>\n",
              "      <td>5336.650000</td>\n",
              "      <td>224446.0</td>\n",
              "      <td>111488.0</td>\n",
              "      <td>344453.0</td>\n",
              "      <td>840217.0</td>\n",
              "      <td>840217.0</td>\n",
              "      <td>-126.0</td>\n",
              "      <td>119646.0</td>\n",
              "      <td>5</td>\n",
              "      <td>74.300000</td>\n",
              "      <td>0.364900</td>\n",
              "      <td>3</td>\n",
              "      <td>-2113.0</td>\n",
              "      <td>-1690.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>1971242.0</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>5202.200000</td>\n",
              "      <td>1466675.0</td>\n",
              "      <td>530056.0</td>\n",
              "      <td>1912338.0</td>\n",
              "      <td>5175500.0</td>\n",
              "      <td>5175500.0</td>\n",
              "      <td>-224.0</td>\n",
              "      <td>145686.0</td>\n",
              "      <td>3</td>\n",
              "      <td>37.100000</td>\n",
              "      <td>0.433100</td>\n",
              "      <td>10</td>\n",
              "      <td>-7952.0</td>\n",
              "      <td>-4384.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152</th>\n",
              "      <td>68969.0</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>6349.210000</td>\n",
              "      <td>62922.0</td>\n",
              "      <td>21304.0</td>\n",
              "      <td>84447.0</td>\n",
              "      <td>180654.0</td>\n",
              "      <td>180686.0</td>\n",
              "      <td>-32.0</td>\n",
              "      <td>3612.0</td>\n",
              "      <td>4</td>\n",
              "      <td>55.800000</td>\n",
              "      <td>0.376200</td>\n",
              "      <td>4</td>\n",
              "      <td>-126.0</td>\n",
              "      <td>-284.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>168</th>\n",
              "      <td>43951.0</td>\n",
              "      <td>0.080000</td>\n",
              "      <td>5540.870000</td>\n",
              "      <td>31782.0</td>\n",
              "      <td>13786.0</td>\n",
              "      <td>67372.0</td>\n",
              "      <td>135031.0</td>\n",
              "      <td>135668.0</td>\n",
              "      <td>-637.0</td>\n",
              "      <td>2579.0</td>\n",
              "      <td>5</td>\n",
              "      <td>64.300000</td>\n",
              "      <td>0.378600</td>\n",
              "      <td>5</td>\n",
              "      <td>-207.0</td>\n",
              "      <td>-141.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>71459.0</td>\n",
              "      <td>0.055000</td>\n",
              "      <td>5988.660000</td>\n",
              "      <td>55169.0</td>\n",
              "      <td>10457.0</td>\n",
              "      <td>37494.0</td>\n",
              "      <td>159238.0</td>\n",
              "      <td>159238.0</td>\n",
              "      <td>1411.0</td>\n",
              "      <td>144103.0</td>\n",
              "      <td>8</td>\n",
              "      <td>91.267606</td>\n",
              "      <td>0.469044</td>\n",
              "      <td>3</td>\n",
              "      <td>-127.0</td>\n",
              "      <td>329.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>554</th>\n",
              "      <td>420164.0</td>\n",
              "      <td>0.013367</td>\n",
              "      <td>5301.002755</td>\n",
              "      <td>262917.0</td>\n",
              "      <td>103841.0</td>\n",
              "      <td>243215.0</td>\n",
              "      <td>962132.0</td>\n",
              "      <td>979277.0</td>\n",
              "      <td>1974.0</td>\n",
              "      <td>55703.0</td>\n",
              "      <td>5</td>\n",
              "      <td>68.300000</td>\n",
              "      <td>0.406600</td>\n",
              "      <td>5</td>\n",
              "      <td>465.0</td>\n",
              "      <td>-393.14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>180 rows × 16 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f828e136-64d9-4757-91e7-b7ef4c49cf11')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f828e136-64d9-4757-91e7-b7ef4c49cf11 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f828e136-64d9-4757-91e7-b7ef4c49cf11');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#הערכת ביצועים\n",
        "from sklearn import metrics\n",
        "\n",
        "print(\"------ TRAIN DATA ------\")\n",
        "print(\"MSE:\",metrics.mean_squared_error(train_df.immigration_balance, train_df.predicted_train_immigration))\n",
        "print(\"RMSE:\",np.sqrt(metrics.mean_squared_error(train_df.immigration_balance, train_df.predicted_train_immigration)))\n",
        "print(\"MAE:\",metrics.mean_absolute_error(train_df.immigration_balance, train_df.predicted_train_immigration))\n",
        "print(\"Train STD:\",train_df['immigration_balance'].std())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EJmalwMoOR8K",
        "outputId": "5f5a8e14-2323-488c-c06d-591b6f2ea80b"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "------ TRAIN DATA ------\n",
            "MSE: 442487.16263007163\n",
            "RMSE: 665.1970855544029\n",
            "MAE: 432.11995226730306\n",
            "Train STD: 943.14797994826\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"------ TEST DATA ------\")\n",
        "print(\"MSE:\",metrics.mean_squared_error(test_df.immigration_balance, test_df.predicted_test_immigration))\n",
        "print(\"RMSE:\",np.sqrt(metrics.mean_squared_error(test_df.immigration_balance, test_df.predicted_test_immigration)))\n",
        "print(\"MAE:\",metrics.mean_absolute_error(test_df.immigration_balance, test_df.predicted_test_immigration))\n",
        "print(\"Test STD:\",test_df['immigration_balance'].std())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bDHba6WbOR_E",
        "outputId": "c6c76daf-ae2c-49b3-b984-7324df4fdb49"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "------ TEST DATA ------\n",
            "MSE: 1107347.014112222\n",
            "RMSE: 1052.3055706933333\n",
            "MAE: 594.7055555555555\n",
            "Test STD: 1423.3593194283726\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "LR_RESULTS = test_df[['immigration_balance','predicted_test_immigration']]\n",
        "LR_RESULTS.plot(x='immigration_balance', y='predicted_test_immigration' ,style='o',figsize=(10,5), grid=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "NGMcHT_VCWr1",
        "outputId": "7c39b433-8b95-4c60-bcaf-2f4e8364b2b7"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f831bf5b8d0>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df['residuals'] = train_df.predicted_train_immigration - train_df.immigration_balance\n",
        "test_df['residuals'] = test_df.predicted_test_immigration - test_df.immigration_balance"
      ],
      "metadata": {
        "id": "BqQbm8oAOSBV"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plot the residuals graph\n",
        "fig= go.Figure()\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=train_df.predicted_train_immigration,\n",
        "        y=train_df.residuals,\n",
        "        mode='markers',\n",
        "        name='train residuals',\n",
        "        marker_color='blue',\n",
        "        marker_size=1.5,\n",
        "        marker_line_width=0,\n",
        "    )\n",
        ")\n",
        "fig.add_trace(\n",
        "  go.Scatter(\n",
        "      x=test_df.predicted_test_immigration,\n",
        "      y=test_df.residuals,\n",
        "      mode='markers',\n",
        "      name='test residuals',\n",
        "      marker_color='red',\n",
        "      marker_size=1.5,\n",
        "      marker_line_width=0,\n",
        "  )\n",
        ")\n",
        "\n",
        "fig.add_trace(\n",
        "  go.Scatter(\n",
        "      x=test_df.predicted_test_immigration,\n",
        "      y=test_df.residuals*0,\n",
        "      mode='lines',\n",
        "      name='zero line',\n",
        "      marker_color='black',\n",
        "      marker_size=1.5,\n",
        "      marker_line_width=0,\n",
        "\n",
        "  )\n",
        ")\n",
        "fig.update_layout(\n",
        "    title=\"Residuals of Predicted Immigration balance\",\n",
        "    xaxis_title=\"Predicted SMP\",\n",
        "    yaxis_title=\"Residuals\",\n",
        "    font=dict(\n",
        "        size=14,\n",
        "        color=\"RebeccaPurple\"\n",
        "    )\n",
        ")\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "y8KrdAmWOSDi",
        "outputId": "1d8bdf57-653c-43da-8c5a-72110ed4fcc7"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"0e9bfb32-2ff3-46cc-a292-243fc179df60\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0e9bfb32-2ff3-46cc-a292-243fc179df60\")) {                    Plotly.newPlot(                        \"0e9bfb32-2ff3-46cc-a292-243fc179df60\",                        [{\"marker\":{\"color\":\"blue\",\"line\":{\"width\":0},\"size\":1.5},\"mode\":\"markers\",\"name\":\"train residuals\",\"x\":[282.74,-950.97,-381.19,-88.31,183.48,-921.68,408.53,-204.18,541.27,170.88,103.19,410.6,284.23,108.87,179.24,249.29,52.71,129.94,564.28,412.79,-773.61,-324.11,-266.81,-128.98,-563.11,304.39,-83.21,335.36,575.06,139.94,188.87,-260.09,243.25,-47.99,194.09,358.74,-201.47,169.45,-1440.52,535.79,-275.62,1.36,239.82,332.06,319.06,102.7,-91.61,899.28,27.44,351.18,429.92,60.58,127.33,113.14,-86.31,-1.65,555.09,469.92,121.38,-411.98,-246.4,314.05,162.84,371.56,-1509.02,-511.71,118.34,-3613.21,-777.73,-40.36,-239.48,205.95,-1159.59,272.96,153.51,-315.1,337.75,131.09,992.44,147.66,-165.43,-51.2,183.87,-358.31,229.3,492.4,-65.74,861.28,14.68,141.29,703.45,429.36,-308.57,-918.7,-57.33,-572.12,-862.41,-335.81,-95.87,-517.15,357.64,-153.61,-64.6,356.31,-346.61,-381.75,160.43,-74.58,-383.56,258.47,-680.35,192.99,-433.28,239.47,137.43,561.43,310.03,-1350.39,38.89,443.76,145.49,125.15,-1152.99,137.33,196.16,-236.07,80.95,-169.13,-47.92,-331.49,52.28,513.41,81.93,661.85,-804.57,575.5,189.79,-731.76,76.57,446.43,178.45,219.19,-23.37,-45.22,267.28,248.69,-148.87,137.68,43.99,129.79,834.48,109.36,344.17,47.41,474.82,-121.81,-1318.27,132.01,500.76,-382.46,-154.05,-190.68,-224.64,-38.48,-434.76,160.84,16.29,-123.93,-38.26,683.01,82.85,296.89,250.47,-446.29,306.09,1263.5,212.75,201.67,-333.87,67.46,210.84,-286.85,-163.55,125.73,273.13,450.97,401.56,-63.54,-61.87,-39.79,-119.73,665.02,-1717.96,-154.23,368.53,417.3,326.03,979.69,242.25,331.1,-141.24,144.01,102.78,676.48,-1354.62,696.79,-246.33,-898.37,621.51,404.33,967.85,177.0,120.84,72.14,-15.01,436.89,-375.23,-140.02,277.61,-239.17,452.53,175.84,2502.64,809.33,189.82,431.86,240.94,590.56,378.93,139.15,-275.0,-48.87,326.39,-733.16,118.3,1368.36,-3919.29,281.27,-231.82,195.0,107.92,-324.0,229.76,302.2,48.47,192.44,366.55,-106.38,127.55,-332.51,-45.93,12.33,496.07,57.45,446.09,491.98,-30.38,59.64,334.28,-838.07,-125.65,-253.22,3.83,-1641.62,-144.22,-329.05,255.81,-598.48,235.57,41.93,-206.74,-283.37,-833.97,195.31,-122.88,204.24,216.37,1144.29,103.25,-69.51,516.35,193.79,294.83,89.7,-99.67,266.98,333.2,337.28,-104.7,-988.17,106.12,-316.89,119.02,118.84,-194.56,-136.84,168.69,257.97,258.05,2807.48,-178.75,-1673.34,-574.18,375.82,-72.07,304.92,44.95,-51.28,-477.37,875.57,-268.68,-253.09,554.0,-179.4,76.06,-328.56,268.99,849.4,-429.64,-6873.15,246.56,-126.15,1004.23,-487.2,-162.03,-117.46,161.57,-1027.57,-177.27,-7.32,605.53,-230.14,-2082.35,-914.82,-22.88,266.61,-237.0,148.2,-10.74,-267.34,338.75,552.43,313.84,-65.86,273.17,74.33,85.46,63.12,-2238.63,-228.47,1116.03,-1093.68,-375.25,-249.65,80.98,-222.83,266.64,-187.45,151.0,295.44,-1046.45,345.45,518.62,-67.13,576.08,-456.3,131.91,-275.7,228.24,734.37,82.44,-4.94,270.18,-289.99,410.15,42.32,-1054.73,313.97,-262.27,-227.8,15.05,246.79,458.43,8.25,-76.61,-758.94,-220.05,88.45,1082.52,203.38,-266.21,-355.19,84.74,300.58,885.2,-440.26,408.96,273.83,821.21,378.89,211.78,796.76,-341.07,367.79,322.1,-250.11,-294.37,343.06,483.35,14.33,-174.51,-1216.0,-94.08,198.19,-679.34,513.19,190.23,164.42,370.98],\"y\":[-0.2599999999999909,779.03,-233.19,283.69,627.48,-211.67999999999995,135.52999999999997,-626.1800000000001,1086.27,134.88,-602.81,402.6,-392.77,-968.13,162.24,-2.710000000000008,484.71,83.94,608.28,-297.21,-500.61,-69.11000000000001,2.1899999999999977,192.02,-468.11,376.39,-476.21,76.36000000000001,578.06,135.94,209.87,-840.0899999999999,101.25,138.01,-2002.91,368.74,257.53,868.45,-1246.52,787.79,24.379999999999995,401.36,-140.18,299.06,410.06,-82.3,-0.6099999999999994,-397.72,-5.559999999999999,-225.82,-2030.08,125.58,555.33,101.14,307.69,176.35,414.09000000000003,636.9200000000001,538.38,-236.98000000000002,-801.4,315.05,82.84,22.560000000000002,-589.02,-143.70999999999998,-1156.66,3748.79,-66.73000000000002,120.64,-2359.48,477.95,651.4100000000001,352.96,170.51,292.9,277.75,127.09,573.44,171.66,127.57,293.8,168.87,-89.31,24.30000000000001,-63.60000000000002,-132.74,821.28,-14.32,140.29,-839.55,501.36,-84.57,119.29999999999995,-627.33,129.88,-23.409999999999968,-86.81,45.129999999999995,-515.15,320.64,74.38999999999999,-826.6,350.31,-1688.6100000000001,-1740.75,125.43,485.42,-118.56,-386.53,-142.35000000000002,-1022.01,-799.28,159.47,117.43,506.42999999999995,52.02999999999997,-155.3900000000001,7.890000000000001,363.76,759.49,-34.849999999999994,-634.99,-954.67,162.16,-889.0699999999999,260.95,22.870000000000005,-2137.92,10.509999999999991,-615.72,571.41,289.93,22.850000000000023,553.43,366.5,118.78999999999999,148.24,-143.43,-431.57,-668.55,-24.810000000000002,91.63,953.78,792.28,-6.310000000000002,18.129999999999995,64.68,-4075.01,119.78999999999999,514.48,102.36,477.17,514.41,899.8199999999999,38.19,1507.73,206.01,-7.240000000000009,-146.45999999999998,196.95,-257.68,469.36,414.52,246.24,-249.16,7.289999999999999,196.07,402.74,503.01,-157.15,366.89,250.47,-422.29,672.0899999999999,-2246.5,-1645.25,189.67,6.1299999999999955,429.46,204.84,-248.85000000000002,-483.55,187.73000000000002,413.13,169.97000000000003,667.56,46.46,314.13,-178.79,-474.73,763.02,451.03999999999996,2214.77,428.53,528.3,81.02999999999997,-1031.31,127.25,345.1,-147.24,75.00999999999999,-16.22,133.48000000000002,320.3800000000001,-223.21000000000004,222.67,-145.37,622.51,-1285.67,448.85,207.0,85.84,-1844.86,-23.009999999999998,-613.11,-2208.23,21.97999999999999,247.61,179.83,106.52999999999997,138.84,-1347.3600000000001,665.33,-1158.18,704.86,-266.06,-709.44,404.93,119.15,-1116.0,108.13,532.39,-1288.1599999999999,817.3,449.3599999999999,391.71000000000004,551.27,207.18,636.0,106.92,-720.0,384.76,891.2,62.47,145.44,272.55,-240.38,124.55,661.49,222.07,198.33,220.07,167.45,62.089999999999975,516.98,177.62,-97.36,464.28,-748.07,-15.650000000000006,-301.22,133.83,99.38000000000011,25.78,-84.05000000000001,212.81,-343.48,509.57,-316.07,-198.74,134.63,1668.03,153.31,118.12,706.24,-277.63,724.29,-910.75,422.49,406.35,147.79,510.83,-1698.3,-139.67000000000002,303.98,-98.80000000000001,-30.720000000000027,115.3,982.83,86.12,-1195.8899999999999,-1428.98,-401.15999999999997,-344.56,214.16,141.69,56.97000000000003,-491.95,-649.52,99.25,550.6600000000001,-340.17999999999995,744.8199999999999,-426.07,364.92,176.95,124.72,-117.37,718.57,524.3199999999999,-246.09,689.0,-819.4,330.06,-178.56,281.99,228.39999999999998,-266.64,-865.1499999999996,175.56,194.85,-2014.77,-397.2,-312.03,337.54,-168.43,-698.5699999999999,-33.27000000000001,46.68,-1087.47,-240.14,-2942.35,-444.82000000000005,104.12,140.61,64.0,133.2,30.259999999999998,-199.33999999999997,315.75,302.42999999999995,244.83999999999997,-149.86,11.170000000000016,-3.6700000000000017,-173.54000000000002,43.12,811.3699999999999,-38.47,354.03,7.319999999999936,286.75,-61.650000000000006,31.980000000000004,377.16999999999996,747.64,-117.44999999999999,101.0,432.44,425.54999999999995,322.45,711.62,145.87,986.08,-28.30000000000001,126.91,35.30000000000001,9.240000000000009,-752.63,32.44,468.06,-763.8199999999999,-1355.99,743.15,251.32,308.27,113.97000000000003,-165.26999999999998,-1001.8,-79.95,-1525.21,297.43,-31.75,-98.61,-1124.94,-130.05,168.45,-166.48000000000002,-170.62,-70.20999999999998,41.81,190.74,341.58,861.2,527.74,498.96,555.8299999999999,-1048.79,208.89,180.78,216.76,3.930000000000007,93.79000000000002,760.1,263.89,-104.37,91.06,-556.65,394.33,-167.51,1787.0,173.92000000000002,-201.81,136.65999999999997,666.19,-489.77,-329.58000000000004,235.98000000000002],\"type\":\"scatter\"},{\"marker\":{\"color\":\"red\",\"line\":{\"width\":0},\"size\":1.5},\"mode\":\"markers\",\"name\":\"test residuals\",\"x\":[-1163.18,971.38,893.36,237.1,-1690.95,-83.24,161.86,66.6,-5595.11,183.84,209.46,-76.74,20.78,-592.03,104.9,-90.17,811.34,-53.77,209.15,-109.31,88.22,383.66,34.42,-269.73,-80.89,-356.35,-42.14,-423.06,-376.7,-318.74,356.82,-1880.49,-3346.53,-162.8,189.93,-366.01,175.28,38.09,-615.6,-16.39,9.7,-131.08,-642.29,-223.45,-345.01,279.41,-3.87,-244.66,-120.42,-441.79,-83.1,-583.37,-124.6,-9.11,-93.92,-123.95,278.51,114.8,146.59,-144.97,60.57,216.8,218.18,-1532.76,212.7,-695.67,106.93,39.16,214.87,689.4,317.09,246.65,217.11,-776.15,114.6,357.17,68.95,-1190.25,-151.14,-39.28,32.68,147.39,-121.81,754.15,210.78,-117.07,131.15,-98.24,41.53,-29.2,-873.91,97.54,80.15,736.64,-1876.65,-199.11,-43.23,342.66,405.5,-327.96,43.61,-113.59,-1687.53,-9.88,-100.86,-4562.8,223.31,-171.78,-662.3,-589.94,20.74,54.59,-477.1,168.47,-922.07,-119.78,351.32,-190.73,-227.12,-473.83,172.09,-1786.13,27.74,-143.28,-97.45,-212.08,-1265.21,-661.47,-76.34,38.03,-160.06,84.87,-656.88,103.54,391.1,-274.14,-404.31,198.41,196.1,170.13,-117.65,-221.19,146.51,25.18,65.15,458.78,199.46,272.0,152.68,-387.09,9.99,76.85,-2599.85,12.64,199.65,1005.06,-248.43,-430.8,795.44,-192.5,-339.78,-92.15,14.34,-2435.41,190.92,335.59,306.79,-521.52,-1216.59,-662.63,-665.21,13.45,-343.57,-331.5,-737.28,-4384.62,-284.09,-141.91,329.48,-393.14],\"y\":[-353.18000000000006,251.38,685.36,506.1,422.04999999999995,-19.239999999999995,655.86,456.6,452.8900000000003,23.840000000000003,219.46,-334.74,530.78,316.97,70.9,-327.17,586.34,418.23,749.15,-150.31,2139.22,-323.34,-615.58,197.26999999999998,185.11,-166.35000000000002,-219.14,-243.06,-271.7,-216.74,-849.1800000000001,277.51,-32.5300000000002,14.199999999999989,229.93,-7.009999999999991,346.28,229.09,2089.4,87.61,-70.3,-154.08,-186.28999999999996,781.55,544.99,354.41,26.13,-108.66,-460.42,-179.79000000000002,-1137.1,-633.37,3.4000000000000057,-208.11,104.08,-27.950000000000003,-406.49,158.8,308.59000000000003,-53.97,-328.43,665.8,300.18,491.24,836.7,-482.66999999999996,216.93,55.16,277.87,1039.4,2351.09,197.65,304.11,-799.15,-54.400000000000006,104.17000000000002,-190.05,-143.25,92.86000000000001,-4747.28,398.68,409.39,431.19,-803.85,187.78,-283.07,-4.849999999999994,-119.24,651.53,-202.2,-114.90999999999997,580.54,-1801.85,-750.36,1234.35,207.89,-225.23,423.66,-1502.5,-305.96,-630.39,-76.59,-118.52999999999997,-499.88,443.14,3288.2,-2382.69,568.22,-1757.3,-22.940000000000055,-246.26,35.59,-1082.1,262.47,7820.93,-459.78,-313.68,-169.73,-232.12,-641.8299999999999,92.09,-1277.13,166.74,-133.28,-587.45,-382.08000000000004,-508.21000000000004,477.53,-358.34000000000003,1.0300000000000011,-157.06,-358.13,-474.88,54.540000000000006,342.1,270.86,-429.31,313.40999999999997,311.1,540.13,-609.65,1269.81,132.51,2.1799999999999997,545.15,-152.22000000000003,679.46,368.0,616.6800000000001,-957.0899999999999,-1485.01,59.849999999999994,-2505.85,652.64,-1036.35,999.06,-301.43,-249.8,-224.55999999999995,-1399.5,-367.78,-141.15,2629.34,-2691.41,118.91999999999999,-564.4100000000001,25.79000000000002,-709.52,-581.5899999999999,-743.63,-891.21,465.45,-631.5699999999999,-941.5,-1407.28,3567.38,-158.08999999999997,65.09,456.48,-858.14],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"line\":{\"width\":0},\"size\":1.5},\"mode\":\"lines\",\"name\":\"zero line\",\"x\":[-1163.18,971.38,893.36,237.1,-1690.95,-83.24,161.86,66.6,-5595.11,183.84,209.46,-76.74,20.78,-592.03,104.9,-90.17,811.34,-53.77,209.15,-109.31,88.22,383.66,34.42,-269.73,-80.89,-356.35,-42.14,-423.06,-376.7,-318.74,356.82,-1880.49,-3346.53,-162.8,189.93,-366.01,175.28,38.09,-615.6,-16.39,9.7,-131.08,-642.29,-223.45,-345.01,279.41,-3.87,-244.66,-120.42,-441.79,-83.1,-583.37,-124.6,-9.11,-93.92,-123.95,278.51,114.8,146.59,-144.97,60.57,216.8,218.18,-1532.76,212.7,-695.67,106.93,39.16,214.87,689.4,317.09,246.65,217.11,-776.15,114.6,357.17,68.95,-1190.25,-151.14,-39.28,32.68,147.39,-121.81,754.15,210.78,-117.07,131.15,-98.24,41.53,-29.2,-873.91,97.54,80.15,736.64,-1876.65,-199.11,-43.23,342.66,405.5,-327.96,43.61,-113.59,-1687.53,-9.88,-100.86,-4562.8,223.31,-171.78,-662.3,-589.94,20.74,54.59,-477.1,168.47,-922.07,-119.78,351.32,-190.73,-227.12,-473.83,172.09,-1786.13,27.74,-143.28,-97.45,-212.08,-1265.21,-661.47,-76.34,38.03,-160.06,84.87,-656.88,103.54,391.1,-274.14,-404.31,198.41,196.1,170.13,-117.65,-221.19,146.51,25.18,65.15,458.78,199.46,272.0,152.68,-387.09,9.99,76.85,-2599.85,12.64,199.65,1005.06,-248.43,-430.8,795.44,-192.5,-339.78,-92.15,14.34,-2435.41,190.92,335.59,306.79,-521.52,-1216.59,-662.63,-665.21,13.45,-343.57,-331.5,-737.28,-4384.62,-284.09,-141.91,329.48,-393.14],\"y\":[-0.0,0.0,0.0,0.0,0.0,-0.0,0.0,0.0,0.0,0.0,0.0,-0.0,0.0,0.0,0.0,-0.0,0.0,0.0,0.0,-0.0,0.0,-0.0,-0.0,0.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,0.0,-0.0,0.0,0.0,-0.0,0.0,0.0,0.0,0.0,-0.0,-0.0,-0.0,0.0,0.0,0.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,0.0,-0.0,0.0,-0.0,-0.0,0.0,0.0,-0.0,-0.0,0.0,0.0,0.0,0.0,-0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0,-0.0,0.0,-0.0,-0.0,0.0,-0.0,0.0,0.0,0.0,-0.0,0.0,-0.0,-0.0,-0.0,0.0,-0.0,-0.0,0.0,-0.0,-0.0,0.0,0.0,-0.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,0.0,0.0,-0.0,0.0,-0.0,-0.0,-0.0,0.0,-0.0,0.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,0.0,-0.0,0.0,-0.0,-0.0,-0.0,-0.0,0.0,-0.0,0.0,-0.0,-0.0,-0.0,0.0,0.0,0.0,-0.0,0.0,0.0,0.0,-0.0,0.0,0.0,0.0,0.0,-0.0,0.0,0.0,0.0,-0.0,-0.0,0.0,-0.0,0.0,-0.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,0.0,-0.0,0.0,-0.0,0.0,-0.0,-0.0,-0.0,-0.0,0.0,-0.0,-0.0,-0.0,0.0,-0.0,0.0,0.0,-0.0],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"font\":{\"size\":14,\"color\":\"RebeccaPurple\"},\"title\":{\"text\":\"Residuals of Predicted Immigration balance\"},\"xaxis\":{\"title\":{\"text\":\"Predicted SMP\"}},\"yaxis\":{\"title\":{\"text\":\"Residuals\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('0e9bfb32-2ff3-46cc-a292-243fc179df60');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#get R2 for train set\n",
        "from sklearn.metrics import r2_score\n",
        "r2_score(train_df.immigration_balance,train_df.predicted_train_immigration)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OIPbk9tFM4oG",
        "outputId": "3e132b0e-89a2-46bd-87fe-625206405d82"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5013696157151689"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#get R2 for test set\n",
        "r2_score(test_df.immigration_balance, test_df.predicted_test_immigration)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h6JTmETVSmd6",
        "outputId": "288d9d7b-6d8c-4942-fe45-e6a496f976dd"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4503653361590315"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " R2 ו RMSE כאשר אנו משווים את תוצאות ה\n",
        "ניתן לראות כי מודל הריגרסיה אינו נותן ביצועים טובים \n",
        "לכן נמשיך לבחון ע\"י קלסיפיקציה האם נוכל לחזות את כיוון ההגירה (חיובי או שלילי)"
      ],
      "metadata": {
        "id": "SWj3cYUJ_NYo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Classification**"
      ],
      "metadata": {
        "id": "HuZU7c65_ysh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# לשנות את ערכי ההגירה ל0-שלילי 1- חיובי\n",
        "classific_df= df_final.copy()\n",
        "classific_df[\"immigration_balance\"] = np.where(classific_df[\"immigration_balance\"] <= 0, 0, 1)\n",
        "classific_df"
      ],
      "metadata": {
        "id": "qRoahBlqSmgW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "outputId": "aba68eee-dbc4-4aab-aaee-0d529503af4b"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Rates collection  Percentage of accumulated deficit from income  \\\n",
              "0             37924.0                                       0.300000   \n",
              "1             37797.0                                       0.290000   \n",
              "2             40414.0                                       0.300000   \n",
              "3             44141.0                                       0.220000   \n",
              "4             31813.0                                       0.120000   \n",
              "..                ...                                            ...   \n",
              "594           44712.0                                       0.050303   \n",
              "595           63639.0                                       0.098777   \n",
              "596           39122.0                                       0.195242   \n",
              "597           37253.0                                       0.121860   \n",
              "598          115027.0                                       0.035522   \n",
              "\n",
              "     Average per capita expenditure in NIS  Education  Welfare  \\\n",
              "0                              5110.950000   148879.0  29281.0   \n",
              "1                              5639.510000   150616.0  30160.0   \n",
              "2                              5531.090000   168718.0  33760.0   \n",
              "3                              5683.240000   166463.0  35452.0   \n",
              "4                              5146.440000    38983.0  19347.0   \n",
              "..                                     ...        ...      ...   \n",
              "594                            5247.724868    51136.0  34602.0   \n",
              "595                            5169.194805    51778.0  22423.0   \n",
              "596                            7805.000000    32848.0  20976.0   \n",
              "597                            7084.077253    56234.0  20278.0   \n",
              "598                            6303.341837    79792.0  28129.0   \n",
              "\n",
              "     Total income from the government  Total expenses  Total income  \\\n",
              "0                            186692.0        270446.0      255189.0   \n",
              "1                            201961.0        276005.0      276005.0   \n",
              "2                            215495.0        309154.0      294964.0   \n",
              "3                            234906.0        320440.0      320440.0   \n",
              "4                             90940.0        146720.0      144547.0   \n",
              "..                                ...             ...           ...   \n",
              "594                           94630.0        198364.0      196986.0   \n",
              "595                           42745.0        199014.0      210626.0   \n",
              "596                           63233.0        162344.0      153138.0   \n",
              "597                           83409.0        165059.0      164517.0   \n",
              "598                           71234.0        247091.0      250492.0   \n",
              "\n",
              "     Surplus or deficit per year  Development Work  immigration_balance  \\\n",
              "0                        15257.0           14677.0                    1   \n",
              "1                        14344.0           16301.0                    0   \n",
              "2                        14128.0            2426.0                    0   \n",
              "3                          -13.0             680.0                    0   \n",
              "4                         2173.0            5658.0                    0   \n",
              "..                           ...               ...                  ...   \n",
              "594                      -1125.0           10242.0                    0   \n",
              "595                      -1226.0           13142.0                    1   \n",
              "596                     -10042.0           14863.0                    0   \n",
              "597                      -4702.0           13754.0                    0   \n",
              "598                       1694.0           18931.0                    1   \n",
              "\n",
              "     Socioeconomic cluster from 1 to 10 lowest 1  \\\n",
              "0                                              2   \n",
              "1                                              2   \n",
              "2                                              2   \n",
              "3                                              2   \n",
              "4                                              3   \n",
              "..                                           ...   \n",
              "594                                            5   \n",
              "595                                            6   \n",
              "596                                            4   \n",
              "597                                            5   \n",
              "598                                            6   \n",
              "\n",
              "     Percentage of eligible for a Bagrut  \\\n",
              "0                              53.300000   \n",
              "1                              52.900000   \n",
              "2                              60.000000   \n",
              "3                              57.757167   \n",
              "4                              47.100000   \n",
              "..                                   ...   \n",
              "594                            62.000000   \n",
              "595                            62.700000   \n",
              "596                            47.800000   \n",
              "597                            58.000000   \n",
              "598                            64.700000   \n",
              "\n",
              "     Gini Index of Inequality Index 0 Full Equality  \\\n",
              "0                                          0.378600   \n",
              "1                                          0.382700   \n",
              "2                                          0.384600   \n",
              "3                                          0.400034   \n",
              "4                                          0.383900   \n",
              "..                                              ...   \n",
              "594                                        0.413200   \n",
              "595                                        0.440500   \n",
              "596                                        0.357200   \n",
              "597                                        0.376900   \n",
              "598                                        0.450100   \n",
              "\n",
              "     Compactness Cluster from 1 to 10 1 highest  \n",
              "0                                             7  \n",
              "1                                             7  \n",
              "2                                             7  \n",
              "3                                             8  \n",
              "4                                             3  \n",
              "..                                          ...  \n",
              "594                                           3  \n",
              "595                                           4  \n",
              "596                                           1  \n",
              "597                                           4  \n",
              "598                                           5  \n",
              "\n",
              "[599 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-461039e9-9439-4b45-acaf-f9b33385cafe\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rates collection</th>\n",
              "      <th>Percentage of accumulated deficit from income</th>\n",
              "      <th>Average per capita expenditure in NIS</th>\n",
              "      <th>Education</th>\n",
              "      <th>Welfare</th>\n",
              "      <th>Total income from the government</th>\n",
              "      <th>Total expenses</th>\n",
              "      <th>Total income</th>\n",
              "      <th>Surplus or deficit per year</th>\n",
              "      <th>Development Work</th>\n",
              "      <th>immigration_balance</th>\n",
              "      <th>Socioeconomic cluster from 1 to 10 lowest 1</th>\n",
              "      <th>Percentage of eligible for a Bagrut</th>\n",
              "      <th>Gini Index of Inequality Index 0 Full Equality</th>\n",
              "      <th>Compactness Cluster from 1 to 10 1 highest</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>37924.0</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>5110.950000</td>\n",
              "      <td>148879.0</td>\n",
              "      <td>29281.0</td>\n",
              "      <td>186692.0</td>\n",
              "      <td>270446.0</td>\n",
              "      <td>255189.0</td>\n",
              "      <td>15257.0</td>\n",
              "      <td>14677.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>53.300000</td>\n",
              "      <td>0.378600</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>37797.0</td>\n",
              "      <td>0.290000</td>\n",
              "      <td>5639.510000</td>\n",
              "      <td>150616.0</td>\n",
              "      <td>30160.0</td>\n",
              "      <td>201961.0</td>\n",
              "      <td>276005.0</td>\n",
              "      <td>276005.0</td>\n",
              "      <td>14344.0</td>\n",
              "      <td>16301.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>52.900000</td>\n",
              "      <td>0.382700</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40414.0</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>5531.090000</td>\n",
              "      <td>168718.0</td>\n",
              "      <td>33760.0</td>\n",
              "      <td>215495.0</td>\n",
              "      <td>309154.0</td>\n",
              "      <td>294964.0</td>\n",
              "      <td>14128.0</td>\n",
              "      <td>2426.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>0.384600</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>44141.0</td>\n",
              "      <td>0.220000</td>\n",
              "      <td>5683.240000</td>\n",
              "      <td>166463.0</td>\n",
              "      <td>35452.0</td>\n",
              "      <td>234906.0</td>\n",
              "      <td>320440.0</td>\n",
              "      <td>320440.0</td>\n",
              "      <td>-13.0</td>\n",
              "      <td>680.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>57.757167</td>\n",
              "      <td>0.400034</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>31813.0</td>\n",
              "      <td>0.120000</td>\n",
              "      <td>5146.440000</td>\n",
              "      <td>38983.0</td>\n",
              "      <td>19347.0</td>\n",
              "      <td>90940.0</td>\n",
              "      <td>146720.0</td>\n",
              "      <td>144547.0</td>\n",
              "      <td>2173.0</td>\n",
              "      <td>5658.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>47.100000</td>\n",
              "      <td>0.383900</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>594</th>\n",
              "      <td>44712.0</td>\n",
              "      <td>0.050303</td>\n",
              "      <td>5247.724868</td>\n",
              "      <td>51136.0</td>\n",
              "      <td>34602.0</td>\n",
              "      <td>94630.0</td>\n",
              "      <td>198364.0</td>\n",
              "      <td>196986.0</td>\n",
              "      <td>-1125.0</td>\n",
              "      <td>10242.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.413200</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>63639.0</td>\n",
              "      <td>0.098777</td>\n",
              "      <td>5169.194805</td>\n",
              "      <td>51778.0</td>\n",
              "      <td>22423.0</td>\n",
              "      <td>42745.0</td>\n",
              "      <td>199014.0</td>\n",
              "      <td>210626.0</td>\n",
              "      <td>-1226.0</td>\n",
              "      <td>13142.0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>62.700000</td>\n",
              "      <td>0.440500</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>39122.0</td>\n",
              "      <td>0.195242</td>\n",
              "      <td>7805.000000</td>\n",
              "      <td>32848.0</td>\n",
              "      <td>20976.0</td>\n",
              "      <td>63233.0</td>\n",
              "      <td>162344.0</td>\n",
              "      <td>153138.0</td>\n",
              "      <td>-10042.0</td>\n",
              "      <td>14863.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>47.800000</td>\n",
              "      <td>0.357200</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>37253.0</td>\n",
              "      <td>0.121860</td>\n",
              "      <td>7084.077253</td>\n",
              "      <td>56234.0</td>\n",
              "      <td>20278.0</td>\n",
              "      <td>83409.0</td>\n",
              "      <td>165059.0</td>\n",
              "      <td>164517.0</td>\n",
              "      <td>-4702.0</td>\n",
              "      <td>13754.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>0.376900</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>115027.0</td>\n",
              "      <td>0.035522</td>\n",
              "      <td>6303.341837</td>\n",
              "      <td>79792.0</td>\n",
              "      <td>28129.0</td>\n",
              "      <td>71234.0</td>\n",
              "      <td>247091.0</td>\n",
              "      <td>250492.0</td>\n",
              "      <td>1694.0</td>\n",
              "      <td>18931.0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>64.700000</td>\n",
              "      <td>0.450100</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>599 rows × 15 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-461039e9-9439-4b45-acaf-f9b33385cafe')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-461039e9-9439-4b45-acaf-f9b33385cafe button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-461039e9-9439-4b45-acaf-f9b33385cafe');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Logistic regression**"
      ],
      "metadata": {
        "id": "zr4nBbsV_9xS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "X = classific_df.drop('immigration_balance', axis=1)\n",
        "y = classific_df.immigration_balance"
      ],
      "metadata": {
        "id": "ivL5O_fpSmiw"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train1, X_test, y_train1, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n",
        "train_df = pd.merge(left=X_train1, right=y_train1, left_index=True, right_index=True)\n",
        "test_df = pd.merge(left=X_test, right=y_test, left_index=True, right_index=True)\n",
        "#train_df.head(10)\n"
      ],
      "metadata": {
        "id": "NmdHqTGMSmlG"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df_valid = train_df.copy()\n",
        "X_valid = train_df_valid.drop('immigration_balance', axis=1)\n",
        "y_valid = train_df_valid.immigration_balance\n",
        "X_train, X_test_valid, y_train, y_test_valid = train_test_split(X_valid, y_valid, test_size=0.2, random_state=1234)\n",
        "train_df1 = pd.merge(left=X_train, right=y_train, left_index=True, right_index=True)\n",
        "test_df1 = pd.merge(left=X_test_valid, right=y_test_valid, left_index=True, right_index=True)\n"
      ],
      "metadata": {
        "id": "Eyiv2xPU8nnl"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "logmodel = LogisticRegression()\n",
        "logmodel.fit(X_train,y_train)\n",
        "probability = logmodel.predict_proba(X_train)\n",
        "prediction = logmodel.predict(X_train)"
      ],
      "metadata": {
        "id": "SOhp50cISmno",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9eb1577a-ff03-4f20-a1d3-f263d77790bc"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning:\n",
            "\n",
            "lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train_prob_0 = pd.Series(probability[:,0], name ='probability_0', index=y_train.index)\n",
        "y_train_prob_1 = pd.Series(probability[:,1], name ='probability_1', index=y_train.index)\n",
        "y_train_pred   = pd.Series(prediction      , name ='prediction'   , index=y_train.index)\n",
        "\n",
        "train_results = pd.DataFrame(data={'probability_0':y_train_prob_0, 'probability_1':y_train_prob_1,'prediction':y_train_pred, 'actual':y_train})\n",
        "train_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "sn19qKvVSmpq",
        "outputId": "dc9559ba-a5cc-48ca-96e6-678b1d8fe6ff"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     probability_0  probability_1  prediction  actual\n",
              "504       0.669166       0.330834           0       1\n",
              "417       0.349609       0.650391           1       1\n",
              "517       0.327648       0.672352           1       1\n",
              "179       0.296220       0.703780           1       1\n",
              "55        0.661686       0.338314           0       0\n",
              "..             ...            ...         ...     ...\n",
              "144       0.562114       0.437886           0       0\n",
              "109       0.540835       0.459165           0       1\n",
              "147       0.615956       0.384044           0       0\n",
              "224       0.519966       0.480034           0       1\n",
              "165       0.508344       0.491656           0       0\n",
              "\n",
              "[383 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a70dac1c-d3e5-4315-8f74-a3c639732035\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>probability_0</th>\n",
              "      <th>probability_1</th>\n",
              "      <th>prediction</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>0.669166</td>\n",
              "      <td>0.330834</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>417</th>\n",
              "      <td>0.349609</td>\n",
              "      <td>0.650391</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>517</th>\n",
              "      <td>0.327648</td>\n",
              "      <td>0.672352</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>0.296220</td>\n",
              "      <td>0.703780</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>0.661686</td>\n",
              "      <td>0.338314</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>0.562114</td>\n",
              "      <td>0.437886</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>0.540835</td>\n",
              "      <td>0.459165</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>0.615956</td>\n",
              "      <td>0.384044</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>0.519966</td>\n",
              "      <td>0.480034</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165</th>\n",
              "      <td>0.508344</td>\n",
              "      <td>0.491656</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>383 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a70dac1c-d3e5-4315-8f74-a3c639732035')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a70dac1c-d3e5-4315-8f74-a3c639732035 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a70dac1c-d3e5-4315-8f74-a3c639732035');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "probability = logmodel.predict_proba(X_test_valid)\n",
        "prediction = logmodel.predict(X_test_valid)"
      ],
      "metadata": {
        "id": "qfPqBXCjSmwo"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_test_prob_0 = pd.Series(probability[:,0], name ='probability_0', index=y_test_valid.index)\n",
        "y_test_prob_1 = pd.Series(probability[:,1], name ='probability_1', index=y_test_valid.index)\n",
        "y_test_pred   = pd.Series(prediction      , name ='prediction'   , index=y_test_valid.index)\n",
        "\n",
        "valid_results = pd.DataFrame(data={'probability_0':y_test_prob_0, 'probability_1':y_test_prob_1,'prediction':y_test_pred, 'actual':y_test_valid})\n",
        "valid_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "-5sdL1IcSmyo",
        "outputId": "4943ad19-d0e8-4b6b-d9b8-59f984b5d6bd"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     probability_0  probability_1  prediction  actual\n",
              "416       0.640868       0.359132           0       0\n",
              "56        0.825463       0.174537           0       0\n",
              "286       0.173826       0.826174           1       0\n",
              "209       0.511478       0.488522           0       1\n",
              "130       0.999129       0.000871           0       0\n",
              "..             ...            ...         ...     ...\n",
              "103       0.550854       0.449146           0       1\n",
              "223       0.628316       0.371684           0       0\n",
              "330       0.446747       0.553253           1       0\n",
              "2         0.596346       0.403654           0       0\n",
              "41        0.721743       0.278257           0       0\n",
              "\n",
              "[96 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1507b01-42d6-4d43-bf0e-0b5485d1d8a0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>probability_0</th>\n",
              "      <th>probability_1</th>\n",
              "      <th>prediction</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>0.640868</td>\n",
              "      <td>0.359132</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>0.825463</td>\n",
              "      <td>0.174537</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286</th>\n",
              "      <td>0.173826</td>\n",
              "      <td>0.826174</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209</th>\n",
              "      <td>0.511478</td>\n",
              "      <td>0.488522</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>130</th>\n",
              "      <td>0.999129</td>\n",
              "      <td>0.000871</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>0.550854</td>\n",
              "      <td>0.449146</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>223</th>\n",
              "      <td>0.628316</td>\n",
              "      <td>0.371684</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>0.446747</td>\n",
              "      <td>0.553253</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.596346</td>\n",
              "      <td>0.403654</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>0.721743</td>\n",
              "      <td>0.278257</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>96 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1507b01-42d6-4d43-bf0e-0b5485d1d8a0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b1507b01-42d6-4d43-bf0e-0b5485d1d8a0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b1507b01-42d6-4d43-bf0e-0b5485d1d8a0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_valid_pred = valid_results.prediction\n",
        "print(metrics.confusion_matrix(y_test_valid,y_valid_pred))\n",
        "print('----------------------------------------------------------')\n",
        "print(metrics.classification_report(y_test_valid,y_valid_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RqNTnmYOS-Wz",
        "outputId": "71cc09d5-9f57-411a-941b-59d8823f75ee"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[37  9]\n",
            " [33 17]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.53      0.80      0.64        46\n",
            "           1       0.65      0.34      0.45        50\n",
            "\n",
            "    accuracy                           0.56        96\n",
            "   macro avg       0.59      0.57      0.54        96\n",
            "weighted avg       0.59      0.56      0.54        96\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "confusion = metrics.confusion_matrix(y_test_valid,y_valid_pred)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=logmodel.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "V1r4CqhIS-ZI",
        "outputId": "76d2a8cb-68e6-419c-bd38-0d56e45c6c29"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f8319ed7490>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "logmodel = LogisticRegression()\n",
        "logmodel.fit(X_test,y_test)\n",
        "probability = logmodel.predict_proba(X_test)\n",
        "prediction = logmodel.predict(X_test)"
      ],
      "metadata": {
        "id": "_NNGqg4uRD4X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "66bc3c8a-b310-4b05-c7ce-677b3b7bdf41"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning:\n",
            "\n",
            "lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test_prob_0 = pd.Series(probability[:,0], name ='probability_0', index=y_test.index)\n",
        "y_test_prob_1 = pd.Series(probability[:,1], name ='probability_1', index=y_test.index)\n",
        "y_test_pred   = pd.Series(prediction      , name ='prediction'   , index=y_test.index)\n",
        "\n",
        "test_results = pd.DataFrame(data={'probability_0':y_test_prob_0, 'probability_1':y_test_prob_1,'prediction':y_test_pred, 'actual':y_test})\n",
        "test_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "7XSW4CkqRD7X",
        "outputId": "51925a9b-31ce-4fd9-d1d3-5e75a7d61419"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     probability_0  probability_1  prediction  actual\n",
              "569       0.910193       0.089807           0       0\n",
              "380       0.069320       0.930680           1       1\n",
              "457       0.188626       0.811374           1       1\n",
              "66        0.231001       0.768999           1       0\n",
              "62        0.958123       0.041877           0       0\n",
              "..             ...            ...         ...     ...\n",
              "508       0.729933       0.270067           0       1\n",
              "344       0.675108       0.324892           0       1\n",
              "574       0.637865       0.362135           0       0\n",
              "321       0.576375       0.423625           0       1\n",
              "240       0.372129       0.627871           1       1\n",
              "\n",
              "[120 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d1fb816-eaf0-4c36-9c53-343e02338d92\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>probability_0</th>\n",
              "      <th>probability_1</th>\n",
              "      <th>prediction</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>569</th>\n",
              "      <td>0.910193</td>\n",
              "      <td>0.089807</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>380</th>\n",
              "      <td>0.069320</td>\n",
              "      <td>0.930680</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>457</th>\n",
              "      <td>0.188626</td>\n",
              "      <td>0.811374</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>0.231001</td>\n",
              "      <td>0.768999</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>0.958123</td>\n",
              "      <td>0.041877</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>508</th>\n",
              "      <td>0.729933</td>\n",
              "      <td>0.270067</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>0.675108</td>\n",
              "      <td>0.324892</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>574</th>\n",
              "      <td>0.637865</td>\n",
              "      <td>0.362135</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>321</th>\n",
              "      <td>0.576375</td>\n",
              "      <td>0.423625</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>240</th>\n",
              "      <td>0.372129</td>\n",
              "      <td>0.627871</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>120 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d1fb816-eaf0-4c36-9c53-343e02338d92')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8d1fb816-eaf0-4c36-9c53-343e02338d92 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8d1fb816-eaf0-4c36-9c53-343e02338d92');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(metrics.confusion_matrix(y_test,y_test_pred))\n",
        "print('----------------------------------------------------------')\n",
        "print(metrics.classification_report(y_test,y_test_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5WOgJTwqREMA",
        "outputId": "a67dcc64-28c1-48c8-e8a0-137bf77f98fb"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[65  8]\n",
            " [23 24]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.74      0.89      0.81        73\n",
            "           1       0.75      0.51      0.61        47\n",
            "\n",
            "    accuracy                           0.74       120\n",
            "   macro avg       0.74      0.70      0.71       120\n",
            "weighted avg       0.74      0.74      0.73       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=logmodel.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "YvtQVqP1SHHU",
        "outputId": "98a9e58b-a27e-430b-b59e-a6f0f9bd0f3b"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f831795aa10>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AUC = metrics.roc_auc_score(y_test, y_test_pred)\n",
        "print('AUC',AUC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YJvLXIMDQ1SS",
        "outputId": "ec3bd2f1-b27f-4252-dc53-eff378f27ce2"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC 0.6729816380064121\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Decision Tree**"
      ],
      "metadata": {
        "id": "BJN9kwWWAW8v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "X = classific_df.drop('immigration_balance',axis=1)\n",
        "y = classific_df['immigration_balance']\n",
        "X_train1, X_test1, y_train1, y_test1 = train_test_split(X, y, test_size=0.2, random_state=1234)\n",
        "train_df = pd.merge(left=X_train1, right=y_train1, left_index=True, right_index=True)\n",
        "test_df = pd.merge(left=X_test1, right=y_test1, left_index=True, right_index=True)\n"
      ],
      "metadata": {
        "id": "i06JDdxeS-bC"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df_valid = train_df.copy()\n",
        "X_valid = train_df_valid.drop('immigration_balance', axis=1)\n",
        "y_valid = train_df_valid.immigration_balance\n",
        "X_train, X_test_valid, y_train, y_test_valid = train_test_split(X_valid, y_valid, test_size=0.2, random_state=1234)\n",
        "train_df1 = pd.merge(left=X_train, right=y_train, left_index=True, right_index=True)\n",
        "test_df1 = pd.merge(left=X_test_valid, right=y_test_valid, left_index=True, right_index=True)"
      ],
      "metadata": {
        "id": "NuCj9qN-BhQh"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "accuracy_for_depth_tree = []\n",
        "for i in range(1,200):\n",
        "    dtree = DecisionTreeClassifier(criterion=\"entropy\",max_depth=i)\n",
        "    dtree.fit(X_train,y_train)\n",
        "    pred_i = dtree.predict(X_test_valid)\n",
        "    accuracy_for_depth_tree.append(accuracy_score(y_test_valid, pred_i))"
      ],
      "metadata": {
        "id": "GLTnC5YRTFPP"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trace = go.Scatter(\n",
        "    x=[i for i in range(1,200)],\n",
        "    y=accuracy_for_depth_tree,\n",
        "    mode='markers+lines', \n",
        ")\n",
        "fig = go.Figure(trace)\n",
        "fig.update_layout(\n",
        "    title='Accuracy by depth tree', \n",
        "    xaxis_title='Depth tree',\n",
        "    yaxis_title='Accuracy score'\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "REthL1hrTFUD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "3e78c3ec-8900-405e-9351-c0f1e9bb328f"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"54943593-cb4b-4a6b-b322-ddebada292a5\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"54943593-cb4b-4a6b-b322-ddebada292a5\")) {                    Plotly.newPlot(                        \"54943593-cb4b-4a6b-b322-ddebada292a5\",                        [{\"mode\":\"markers+lines\",\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199],\"y\":[0.5208333333333334,0.71875,0.7291666666666666,0.78125,0.8020833333333334,0.8020833333333334,0.8333333333333334,0.8229166666666666,0.78125,0.8020833333333334,0.7916666666666666,0.7916666666666666,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.7916666666666666,0.7708333333333334,0.78125,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.7916666666666666,0.8020833333333334,0.7916666666666666,0.8020833333333334,0.8125,0.8125,0.78125,0.8020833333333334,0.7708333333333334,0.8125,0.7708333333333334,0.8020833333333334,0.8125,0.8125,0.78125,0.8020833333333334,0.78125,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.78125,0.8229166666666666,0.8125,0.8125,0.7916666666666666,0.8229166666666666,0.8020833333333334,0.8020833333333334,0.7708333333333334,0.7916666666666666,0.7708333333333334,0.8229166666666666,0.78125,0.7916666666666666,0.78125,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.78125,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.7708333333333334,0.78125,0.8020833333333334,0.7916666666666666,0.7916666666666666,0.7916666666666666,0.7916666666666666,0.7916666666666666,0.8125,0.8020833333333334,0.8125,0.78125,0.8020833333333334,0.7916666666666666,0.8020833333333334,0.78125,0.7916666666666666,0.8125,0.7708333333333334,0.8020833333333334,0.8020833333333334,0.7916666666666666,0.78125,0.7916666666666666,0.8125,0.78125,0.7916666666666666,0.8125,0.7916666666666666,0.8229166666666666,0.7916666666666666,0.7916666666666666,0.7916666666666666,0.8125,0.7916666666666666,0.78125,0.8020833333333334,0.7916666666666666,0.7916666666666666,0.7916666666666666,0.8125,0.8020833333333334,0.8020833333333334,0.8125,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.8125,0.8125,0.78125,0.7604166666666666,0.7916666666666666,0.8020833333333334,0.7916666666666666,0.8229166666666666,0.7916666666666666,0.8125,0.8125,0.7916666666666666,0.78125,0.8125,0.8229166666666666,0.78125,0.8020833333333334,0.8125,0.7916666666666666,0.8125,0.8229166666666666,0.8125,0.78125,0.8020833333333334,0.8125,0.7916666666666666,0.7604166666666666,0.7916666666666666,0.78125,0.7916666666666666,0.8020833333333334,0.8229166666666666,0.8125,0.8020833333333334,0.78125,0.7916666666666666,0.7916666666666666,0.78125,0.78125,0.8125,0.7708333333333334,0.7916666666666666,0.8125,0.8020833333333334,0.8125,0.7916666666666666,0.8229166666666666,0.7916666666666666,0.7916666666666666,0.7916666666666666,0.8020833333333334,0.8229166666666666,0.7916666666666666,0.8020833333333334,0.78125,0.8125,0.78125,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.78125,0.8125,0.78125,0.7916666666666666,0.8020833333333334,0.78125,0.8125,0.8020833333333334,0.8020833333333334,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.7916666666666666,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.8125,0.8020833333333334,0.7916666666666666,0.8020833333333334,0.8020833333333334,0.8020833333333334,0.7916666666666666],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Accuracy by depth tree\"},\"xaxis\":{\"title\":{\"text\":\"Depth tree\"}},\"yaxis\":{\"title\":{\"text\":\"Accuracy score\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('54943593-cb4b-4a6b-b322-ddebada292a5');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "dtree = DecisionTreeClassifier(criterion=\"entropy\",max_depth=7)"
      ],
      "metadata": {
        "id": "UCbBDWb5TFZ5"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dtree.fit(X_train,y_train)"
      ],
      "metadata": {
        "id": "fYLHHbcSTFfV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a6a6cb42-6d4e-49e4-fb60-9a4b482f1323"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(criterion='entropy', max_depth=7)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = dtree.predict(X_test)\n",
        "y_pred_df = pd.DataFrame(y_pred, columns=['y_pred'])\n",
        "pred_df = pd.DataFrame({\"Actual\": classific_df.immigration_balance, \"Prediction\":y_pred} ,index = y_test.index)\n",
        "pred_df.head(10)"
      ],
      "metadata": {
        "id": "tSiHAx9gTfR0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "outputId": "81db3adb-566e-45ba-984d-1a7e0da9c73f"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Actual  Prediction\n",
              "569       0           0\n",
              "380       1           1\n",
              "457       1           1\n",
              "66        0           0\n",
              "62        0           0\n",
              "226       0           1\n",
              "166       0           0\n",
              "519       0           0\n",
              "131       0           0\n",
              "124       1           1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-14959663-be79-4b06-b866-45c1b49d54dc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Actual</th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>569</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>380</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>457</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>226</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>519</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>131</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14959663-be79-4b06-b866-45c1b49d54dc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-14959663-be79-4b06-b866-45c1b49d54dc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-14959663-be79-4b06-b866-45c1b49d54dc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "id": "9P5jhiIVTfZA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d357e838-654b-41fe-81f6-06c423e683f4"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[52 21]\n",
            " [11 36]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.71      0.76        73\n",
            "           1       0.63      0.77      0.69        47\n",
            "\n",
            "    accuracy                           0.73       120\n",
            "   macro avg       0.73      0.74      0.73       120\n",
            "weighted avg       0.75      0.73      0.74       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = metrics.confusion_matrix(y_test,y_pred_df)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=logmodel.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "id": "KjZyIEx-Tfbv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "aadf2047-86ac-42b6-b927-be0b6fa314e6"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f8317018cd0>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AUC = metrics.roc_auc_score(y_test,y_pred)\n",
        "print('AUC',AUC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fzk_kCdtSByY",
        "outputId": "29bd2e15-23a0-4bae-ed9b-ce4cab99ff0c"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC 0.7072282133488779\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Random Forest**"
      ],
      "metadata": {
        "id": "YXdcyINuAfDO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n"
      ],
      "metadata": {
        "id": "5oY5qVIQTfeX"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_n_estimators = []\n",
        "for i in range(1,100):\n",
        "    rfc = RandomForestClassifier(n_estimators=i,criterion='entropy')\n",
        "    rfc.fit(X_train,y_train)\n",
        "    pred_i = rfc.predict(X_test_valid)\n",
        "    accuracy_n_estimators.append(accuracy_score(y_test_valid, pred_i))"
      ],
      "metadata": {
        "id": "b8ZgCDt8WqzC"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trace = go.Scatter(\n",
        "    x=[i for i in range(1,100)],\n",
        "    y=accuracy_n_estimators,\n",
        "    mode='markers+lines', \n",
        ")\n",
        "fig = go.Figure(trace)\n",
        "fig.update_layout(\n",
        "    title='Accuracy by N estimators', \n",
        "    xaxis_title='N estimators',\n",
        "    yaxis_title='Accuracy score'\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "JP8Wt_fwWu98",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "ec771df3-dd3a-4ab5-f10e-93baf04213b5"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"730200bc-0ad1-4ec9-aeaa-bbfda6e09f0f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"730200bc-0ad1-4ec9-aeaa-bbfda6e09f0f\")) {                    Plotly.newPlot(                        \"730200bc-0ad1-4ec9-aeaa-bbfda6e09f0f\",                        [{\"mode\":\"markers+lines\",\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],\"y\":[0.6041666666666666,0.65625,0.625,0.65625,0.6770833333333334,0.6770833333333334,0.75,0.7604166666666666,0.75,0.7708333333333334,0.7604166666666666,0.8020833333333334,0.8229166666666666,0.7083333333333334,0.7604166666666666,0.8020833333333334,0.7604166666666666,0.7708333333333334,0.7291666666666666,0.75,0.8020833333333334,0.8541666666666666,0.78125,0.7708333333333334,0.75,0.8125,0.7395833333333334,0.78125,0.8020833333333334,0.7708333333333334,0.8125,0.8125,0.8125,0.7708333333333334,0.8229166666666666,0.7708333333333334,0.8125,0.7708333333333334,0.8020833333333334,0.75,0.78125,0.7604166666666666,0.7604166666666666,0.78125,0.78125,0.8020833333333334,0.7916666666666666,0.7395833333333334,0.78125,0.8125,0.7916666666666666,0.8125,0.7916666666666666,0.8125,0.78125,0.7395833333333334,0.8125,0.8229166666666666,0.7604166666666666,0.78125,0.7916666666666666,0.7604166666666666,0.7916666666666666,0.7708333333333334,0.8020833333333334,0.7604166666666666,0.7395833333333334,0.7916666666666666,0.78125,0.8020833333333334,0.8125,0.7291666666666666,0.7708333333333334,0.7708333333333334,0.7916666666666666,0.8229166666666666,0.8125,0.78125,0.78125,0.8125,0.8020833333333334,0.7708333333333334,0.78125,0.7708333333333334,0.78125,0.78125,0.7916666666666666,0.8125,0.7604166666666666,0.78125,0.78125,0.7916666666666666,0.78125,0.78125,0.78125,0.7916666666666666,0.8229166666666666,0.78125,0.8020833333333334],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Accuracy by N estimators\"},\"xaxis\":{\"title\":{\"text\":\"N estimators\"}},\"yaxis\":{\"title\":{\"text\":\"Accuracy score\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('730200bc-0ad1-4ec9-aeaa-bbfda6e09f0f');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rfc = RandomForestClassifier(n_estimators=22,criterion='entropy')"
      ],
      "metadata": {
        "id": "ni-yHqqbWq6k"
      },
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rfc.fit(X_train,y_train)\n",
        "y_predict = rfc.predict(X_test)"
      ],
      "metadata": {
        "id": "CkH1BVlDUHT3"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test,y_predict))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test,y_predict))"
      ],
      "metadata": {
        "id": "WICstvcUUHWp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f93bb504-2075-41e2-812f-ec567382fd84"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[59 14]\n",
            " [10 37]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.81      0.83        73\n",
            "           1       0.73      0.79      0.76        47\n",
            "\n",
            "    accuracy                           0.80       120\n",
            "   macro avg       0.79      0.80      0.79       120\n",
            "weighted avg       0.80      0.80      0.80       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = metrics.confusion_matrix(y_test,y_predict)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=logmodel.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "id": "BeZZ_cFJUHYs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "f11f5809-559a-4b07-a95c-b70c3d25f181"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f830d701590>"
            ]
          },
          "metadata": {},
          "execution_count": 125
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AUC = metrics.roc_auc_score( y_test, y_predict)\n",
        "print('AUC',AUC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2JvkPTRCSSow",
        "outputId": "a1a87879-fc13-4bb4-93dc-3d3d4bcfc794"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC 0.7977266103176917\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**KNN**"
      ],
      "metadata": {
        "id": "4kTqG-RJAoxT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "accuracy_for_N = []\n",
        "for i in range(1,200):\n",
        "    knn = KNeighborsClassifier(n_neighbors = i)\n",
        "    knn.fit(X_train, y_train)\n",
        "    pred_i = knn.predict(X_test_valid)\n",
        "    accuracy_for_N.append(accuracy_score(y_test_valid, pred_i))"
      ],
      "metadata": {
        "id": "D7Iqf-2MRGC1"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trace = go.Scatter(\n",
        "    x=[i for i in range(1,200)],\n",
        "    y=accuracy_for_N,\n",
        "    mode='markers+lines', \n",
        ")\n",
        "fig = go.Figure(trace)\n",
        "fig.update_layout(\n",
        "    title='Accuracy by K Value', \n",
        "    xaxis_title='k neighboors',\n",
        "    yaxis_title='Accuracy score'\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "7Q2zVdFXRGK8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "bd656b8a-c733-4ac8-dcf2-f6af797ce992"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"4b316755-0291-49a2-9da4-7b7afe7e2248\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4b316755-0291-49a2-9da4-7b7afe7e2248\")) {                    Plotly.newPlot(                        \"4b316755-0291-49a2-9da4-7b7afe7e2248\",                        [{\"mode\":\"markers+lines\",\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199],\"y\":[0.7083333333333334,0.6666666666666666,0.7291666666666666,0.6875,0.7083333333333334,0.6875,0.7083333333333334,0.6979166666666666,0.7083333333333334,0.71875,0.71875,0.6875,0.6770833333333334,0.6458333333333334,0.71875,0.6770833333333334,0.7083333333333334,0.6770833333333334,0.7083333333333334,0.6770833333333334,0.6979166666666666,0.6770833333333334,0.71875,0.6666666666666666,0.6979166666666666,0.6458333333333334,0.6770833333333334,0.6354166666666666,0.6875,0.65625,0.7083333333333334,0.6458333333333334,0.6979166666666666,0.65625,0.6979166666666666,0.6770833333333334,0.6770833333333334,0.65625,0.6770833333333334,0.6875,0.6875,0.7083333333333334,0.7083333333333334,0.6666666666666666,0.6458333333333334,0.625,0.6354166666666666,0.625,0.6145833333333334,0.6145833333333334,0.5833333333333334,0.59375,0.6145833333333334,0.59375,0.59375,0.5833333333333334,0.5833333333333334,0.5729166666666666,0.5833333333333334,0.5416666666666666,0.59375,0.5625,0.59375,0.5625,0.5520833333333334,0.5625,0.5625,0.5520833333333334,0.59375,0.5625,0.5625,0.5416666666666666,0.5625,0.53125,0.5520833333333334,0.5208333333333334,0.5208333333333334,0.5104166666666666,0.5,0.5208333333333334,0.5208333333333334,0.5208333333333334,0.53125,0.5104166666666666,0.5104166666666666,0.4895833333333333,0.4791666666666667,0.4791666666666667,0.46875,0.46875,0.4895833333333333,0.4583333333333333,0.4895833333333333,0.46875,0.4791666666666667,0.4583333333333333,0.46875,0.4583333333333333,0.4791666666666667,0.4791666666666667,0.5416666666666666,0.4791666666666667,0.5,0.46875,0.4895833333333333,0.4479166666666667,0.4791666666666667,0.4583333333333333,0.46875,0.4375,0.4583333333333333,0.4375,0.4375,0.4479166666666667,0.4479166666666667,0.4375,0.4583333333333333,0.4270833333333333,0.4375,0.4375,0.4375,0.4479166666666667,0.4479166666666667,0.4270833333333333,0.4375,0.4270833333333333,0.4270833333333333,0.4270833333333333,0.4270833333333333,0.4166666666666667,0.4166666666666667,0.4166666666666667,0.4270833333333333,0.4375,0.4375,0.4375,0.4583333333333333,0.4270833333333333,0.4479166666666667,0.4375,0.4375,0.4270833333333333,0.4166666666666667,0.4166666666666667,0.4270833333333333,0.4166666666666667,0.4375,0.4270833333333333,0.4375,0.4270833333333333,0.4270833333333333,0.4270833333333333,0.4270833333333333,0.4270833333333333,0.4270833333333333,0.40625,0.40625,0.4166666666666667,0.4270833333333333,0.4166666666666667,0.4375,0.4270833333333333,0.4375,0.4375,0.4375,0.4375,0.4270833333333333,0.40625,0.40625,0.40625,0.4166666666666667,0.4270833333333333,0.4270833333333333,0.4166666666666667,0.40625,0.40625,0.40625,0.40625,0.40625,0.40625,0.4166666666666667,0.4166666666666667,0.4479166666666667,0.4375,0.4375,0.4270833333333333,0.4166666666666667,0.40625,0.4166666666666667,0.40625,0.4166666666666667,0.4166666666666667,0.4166666666666667,0.4270833333333333,0.4270833333333333,0.4166666666666667,0.4166666666666667,0.40625,0.40625],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Accuracy by K Value\"},\"xaxis\":{\"title\":{\"text\":\"k neighboors\"}},\"yaxis\":{\"title\":{\"text\":\"Accuracy score\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('4b316755-0291-49a2-9da4-7b7afe7e2248');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "error_rate = []\n",
        "for i in range(1,200):\n",
        "    knn = KNeighborsClassifier(n_neighbors = i)\n",
        "    knn.fit(X_train, y_train)\n",
        "    pred_i = knn.predict(X_test_valid)\n",
        "    error_rate.append(np.mean(pred_i != y_test_valid))\n",
        "    "
      ],
      "metadata": {
        "id": "82MJFKdKUHfe"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trace = go.Scatter(\n",
        "    x=[i for i in range(1,200)],\n",
        "    y=error_rate,\n",
        "    mode='markers+lines', \n",
        ")\n",
        "fig = go.Figure(trace)\n",
        "fig.update_layout(\n",
        "    title='Error by K Value', \n",
        "    xaxis_title='k neighboors',\n",
        "    yaxis_title='Error rate'\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "JmJFryEGUHhc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "2a6de187-daee-4465-d58b-5f1debf82bdf"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f3c9295a-ad15-4429-a867-c17a9e662eb7\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f3c9295a-ad15-4429-a867-c17a9e662eb7\")) {                    Plotly.newPlot(                        \"f3c9295a-ad15-4429-a867-c17a9e662eb7\",                        [{\"mode\":\"markers+lines\",\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199],\"y\":[0.2916666666666667,0.3333333333333333,0.2708333333333333,0.3125,0.2916666666666667,0.3125,0.2916666666666667,0.3020833333333333,0.2916666666666667,0.28125,0.28125,0.3125,0.3229166666666667,0.3541666666666667,0.28125,0.3229166666666667,0.2916666666666667,0.3229166666666667,0.2916666666666667,0.3229166666666667,0.3020833333333333,0.3229166666666667,0.28125,0.3333333333333333,0.3020833333333333,0.3541666666666667,0.3229166666666667,0.3645833333333333,0.3125,0.34375,0.2916666666666667,0.3541666666666667,0.3020833333333333,0.34375,0.3020833333333333,0.3229166666666667,0.3229166666666667,0.34375,0.3229166666666667,0.3125,0.3125,0.2916666666666667,0.2916666666666667,0.3333333333333333,0.3541666666666667,0.375,0.3645833333333333,0.375,0.3854166666666667,0.3854166666666667,0.4166666666666667,0.40625,0.3854166666666667,0.40625,0.40625,0.4166666666666667,0.4166666666666667,0.4270833333333333,0.4166666666666667,0.4583333333333333,0.40625,0.4375,0.40625,0.4375,0.4479166666666667,0.4375,0.4375,0.4479166666666667,0.40625,0.4375,0.4375,0.4583333333333333,0.4375,0.46875,0.4479166666666667,0.4791666666666667,0.4791666666666667,0.4895833333333333,0.5,0.4791666666666667,0.4791666666666667,0.4791666666666667,0.46875,0.4895833333333333,0.4895833333333333,0.5104166666666666,0.5208333333333334,0.5208333333333334,0.53125,0.53125,0.5104166666666666,0.5416666666666666,0.5104166666666666,0.53125,0.5208333333333334,0.5416666666666666,0.53125,0.5416666666666666,0.5208333333333334,0.5208333333333334,0.4583333333333333,0.5208333333333334,0.5,0.53125,0.5104166666666666,0.5520833333333334,0.5208333333333334,0.5416666666666666,0.53125,0.5625,0.5416666666666666,0.5625,0.5625,0.5520833333333334,0.5520833333333334,0.5625,0.5416666666666666,0.5729166666666666,0.5625,0.5625,0.5625,0.5520833333333334,0.5520833333333334,0.5729166666666666,0.5625,0.5729166666666666,0.5729166666666666,0.5729166666666666,0.5729166666666666,0.5833333333333334,0.5833333333333334,0.5833333333333334,0.5729166666666666,0.5625,0.5625,0.5625,0.5416666666666666,0.5729166666666666,0.5520833333333334,0.5625,0.5625,0.5729166666666666,0.5833333333333334,0.5833333333333334,0.5729166666666666,0.5833333333333334,0.5625,0.5729166666666666,0.5625,0.5729166666666666,0.5729166666666666,0.5729166666666666,0.5729166666666666,0.5729166666666666,0.5729166666666666,0.59375,0.59375,0.5833333333333334,0.5729166666666666,0.5833333333333334,0.5625,0.5729166666666666,0.5625,0.5625,0.5625,0.5625,0.5729166666666666,0.59375,0.59375,0.59375,0.5833333333333334,0.5729166666666666,0.5729166666666666,0.5833333333333334,0.59375,0.59375,0.59375,0.59375,0.59375,0.59375,0.5833333333333334,0.5833333333333334,0.5520833333333334,0.5625,0.5625,0.5729166666666666,0.5833333333333334,0.59375,0.5833333333333334,0.59375,0.5833333333333334,0.5833333333333334,0.5833333333333334,0.5729166666666666,0.5729166666666666,0.5833333333333334,0.5833333333333334,0.59375,0.59375],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Error by K Value\"},\"xaxis\":{\"title\":{\"text\":\"k neighboors\"}},\"yaxis\":{\"title\":{\"text\":\"Error rate\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('f3c9295a-ad15-4429-a867-c17a9e662eb7');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn = KNeighborsClassifier(n_neighbors = 3)\n",
        "knn.fit(X_train, y_train)\n",
        "prediction = knn.predict(X_test_valid)"
      ],
      "metadata": {
        "id": "sYx5MMYXlAPS"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_train_pred = pd.Series(prediction, name='prediction', index=y_test_valid.index)\n",
        "\n",
        "train_results = pd.DataFrame(data={'prediction':y_train_pred, 'actual':y_test_valid})\n",
        "train_results"
      ],
      "metadata": {
        "id": "0GtfT_gPUHjg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "b78bb497-b93a-440c-840e-8b8b66b00de1"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     prediction  actual\n",
              "416           0       0\n",
              "56            0       0\n",
              "286           0       0\n",
              "209           1       1\n",
              "130           0       0\n",
              "..          ...     ...\n",
              "103           1       1\n",
              "223           0       0\n",
              "330           0       0\n",
              "2             0       0\n",
              "41            0       0\n",
              "\n",
              "[96 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbe9a3da-d692-4001-8772-b297c280aa9e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prediction</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>130</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>223</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>96 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbe9a3da-d692-4001-8772-b297c280aa9e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cbe9a3da-d692-4001-8772-b297c280aa9e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cbe9a3da-d692-4001-8772-b297c280aa9e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len_correct_rows = len(train_results.loc[train_results.prediction==train_results.actual])\n",
        "accuracy = round(len_correct_rows/len(train_results),3)\n",
        "print('accuracy = ', accuracy)\n",
        "\n",
        "from sklearn import metrics\n",
        "accu = metrics.accuracy_score(y_test_valid, y_train_pred)\n",
        "accu"
      ],
      "metadata": {
        "id": "3NgMScpnUHlh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e87e2f8-d5fa-4f37-9a6f-4ca877c49155"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy =  0.729\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7291666666666666"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = knn.predict(X_test)\n",
        "\n",
        "y_test_pred = pd.Series(y_pred, name='prediction', index=y_test.index)\n",
        "\n",
        "test_results = pd.DataFrame(data={'prediction':y_test_pred, 'actual':y_test})\n",
        "test_results"
      ],
      "metadata": {
        "id": "_FwnwXrBUfEv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "89c0a520-58ef-4c0d-8c5d-e4f5635ecf3e"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     prediction  actual\n",
              "569           0       0\n",
              "380           1       1\n",
              "457           1       1\n",
              "66            0       0\n",
              "62            0       0\n",
              "..          ...     ...\n",
              "508           1       1\n",
              "344           0       1\n",
              "574           1       0\n",
              "321           1       1\n",
              "240           1       1\n",
              "\n",
              "[120 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4606360a-12e2-40c7-bddd-ab9763e9ae79\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prediction</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>569</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>380</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>457</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>508</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>574</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>321</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>240</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>120 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4606360a-12e2-40c7-bddd-ab9763e9ae79')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4606360a-12e2-40c7-bddd-ab9763e9ae79 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4606360a-12e2-40c7-bddd-ab9763e9ae79');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=knn.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "id": "bjuZGWbbUfJ4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "e92c81be-f6f7-4f47-bf20-db155c1fc247"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f831795a7d0>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "9yifJvcKUfMM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f47bd696-3b81-48bc-c27c-7ae54d0c9bf5"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.71      0.75        73\n",
            "           1       0.61      0.70      0.65        47\n",
            "\n",
            "    accuracy                           0.71       120\n",
            "   macro avg       0.70      0.71      0.70       120\n",
            "weighted avg       0.72      0.71      0.71       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AUC = metrics.roc_auc_score( y_test, y_pred)\n",
        "print('AUC',AUC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "baa7ycGATDv3",
        "outputId": "f553efdc-d73a-4fc1-d2cc-ab9f665fbd59"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC 0.7072282133488779\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**לאחר בחינת הביצוועים של כל המודלים המודל איתו נמשיך את העבודה הוא יערות רנדומיים אשר הגיע לרמת דיוק של 0.81**\n",
        "\n",
        "כעת אנו מעוניינים לבחון את ביצועי המודל ללא הפיצ'רים אשר נמצאו בקורלציה:\n"
      ],
      "metadata": {
        "id": "ivStgfnVBPJs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_no_corr = classific_df.copy()\n",
        "df_no_corr.drop(['Total income','Welfare','Education'], axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "bKci8iUxUmsF"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_no_corr.drop('immigration_balance',axis=1)\n",
        "y = df_no_corr['immigration_balance']"
      ],
      "metadata": {
        "id": "BQY36jd9Umub"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train1, X_test, y_train1, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n",
        "train_df = pd.merge(left=X_train1, right=y_train1, left_index=True, right_index=True)\n",
        "test_df = pd.merge(left=X_test, right=y_test, left_index=True, right_index=True)\n",
        "train_df_valid = train_df.copy()\n",
        "X_valid = train_df_valid.drop('immigration_balance', axis=1)\n",
        "y_valid = train_df_valid.immigration_balance\n",
        "X_train, X_test_valid, y_train, y_test_valid = train_test_split(X_valid, y_valid, test_size=0.2, random_state=1234)\n",
        "train_df1 = pd.merge(left=X_train, right=y_train, left_index=True, right_index=True)\n",
        "test_df1 = pd.merge(left=X_test_valid, right=y_test_valid, left_index=True, right_index=True)\n"
      ],
      "metadata": {
        "id": "cdFbBF3WRLWf"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rfc_corr = RandomForestClassifier(n_estimators=30,criterion='entropy')\n",
        "rfc_corr.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NgRxWShQRLa9",
        "outputId": "647480f0-094e-4a2d-e018-9c098b39c5e3"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(criterion='entropy', n_estimators=30)"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_predict = rfc_corr.predict(X_test_valid)"
      ],
      "metadata": {
        "id": "y6T0-9zpQ-E1"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test_valid,y_predict))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test_valid,y_predict))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LX1-Ub-RRkek",
        "outputId": "66ebe561-3575-4055-c7da-89dbcdfb4613"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[37  9]\n",
            " [14 36]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      0.80      0.76        46\n",
            "           1       0.80      0.72      0.76        50\n",
            "\n",
            "    accuracy                           0.76        96\n",
            "   macro avg       0.76      0.76      0.76        96\n",
            "weighted avg       0.76      0.76      0.76        96\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = confusion_matrix(y_test_valid,y_predict)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=knn.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "Sb4Q3np3VQnW",
        "outputId": "0d33aeb3-6377-4a3c-8d3f-385b0f20e020"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f8316a44f50>"
            ]
          },
          "metadata": {},
          "execution_count": 69
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "EKKSLqYwVSMn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "prediction = rfc_corr.predict(X_test)"
      ],
      "metadata": {
        "id": "FJJoXBbERkhK"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test,prediction))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test,prediction))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zxgyuOeUSzNa",
        "outputId": "0cc541b7-d558-4466-e518-b0e7e31752aa"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[60 13]\n",
            " [ 7 40]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.82      0.86        73\n",
            "           1       0.75      0.85      0.80        47\n",
            "\n",
            "    accuracy                           0.83       120\n",
            "   macro avg       0.83      0.84      0.83       120\n",
            "weighted avg       0.84      0.83      0.83       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = confusion_matrix(y_test,prediction)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=knn.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "id": "XAvFBmCZUHnW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "ab48b3e6-02e2-494d-8c06-7cd670838d2e"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f830d599c90>"
            ]
          },
          "metadata": {},
          "execution_count": 128
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AUC = metrics.roc_auc_score( y_test,prediction)\n",
        "print('AUC',AUC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c9-ClXaVVetG",
        "outputId": "15238430-4fdc-41c1-c65e-2a00ad44de51"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC 0.836490819003206\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "המודל ללא הפיצ'רים בקורלציה הגיע לרמת דיוק של 0.78 לעומת רמת דיוק של 0.82 לכן נחליט להשאיר את הפיצ'רים"
      ],
      "metadata": {
        "id": "Yo82USmlB98M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# cross validation\n",
        "CROSS_DF = classific_df.copy()\n",
        "X = CROSS_DF.drop('immigration_balance',axis=1)\n",
        "y = CROSS_DF['immigration_balance']"
      ],
      "metadata": {
        "id": "FT5iDexKSm3N"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "auc_scores = cross_val_score(rfc,X, y, cv=10, scoring='roc_auc') #f1, recall, presicion\n",
        "auc_scores\n"
      ],
      "metadata": {
        "id": "aBjp0nX6VgHz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1befe3fc-635f-4dae-d063-cfe27647700a"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.75361513, 0.78086763, 0.75472747, 0.6785317 , 0.89229911,\n",
              "       0.92354911, 0.79575893, 0.82198661, 0.8828125 , 0.85023041])"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_scores = cross_val_score(rfc, X, y, cv=10, scoring='accuracy')\n",
        "accuracy_scores"
      ],
      "metadata": {
        "id": "i8BeRm4dVgKQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "45940dd1-a6d7-4158-b079-44b17283570b"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.75      , 0.75      , 0.7       , 0.65      , 0.86666667,\n",
              "       0.88333333, 0.8       , 0.73333333, 0.8       , 0.76271186])"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Mean values')\n",
        "print('auc:', auc_scores.mean())\n",
        "print('accuracy: ', accuracy_scores.mean())"
      ],
      "metadata": {
        "id": "gf_m9_KqVgMS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a3e4b21-54dc-402c-fd2d-ca10e15dcf88"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean values\n",
            "auc: 0.8134378600230414\n",
            "accuracy:  0.7696045197740112\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**לאחר שנבחר מודל יערות רנדומיים, אנו ננסה להעלות את הרמה.\\\n",
        "נשתמש במודל חדש XG BOOST**"
      ],
      "metadata": {
        "id": "zXzBgwiMKLeC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier"
      ],
      "metadata": {
        "id": "F7PoSEU-UojO"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = classific_df.drop('immigration_balance', axis=1)\n",
        "y = classific_df.immigration_balance"
      ],
      "metadata": {
        "id": "GhyYT4h9Uoli"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train1, X_test, y_train1, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n",
        "train_df = pd.merge(left=X_train1, right=y_train1, left_index=True, right_index=True)\n",
        "test_df = pd.merge(left=X_test, right=y_test, left_index=True, right_index=True)"
      ],
      "metadata": {
        "id": "4m0uSsVHfOYe"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df_valid = train_df.copy()\n",
        "X_valid = train_df_valid.drop('immigration_balance', axis=1)\n",
        "y_valid = train_df_valid.immigration_balance\n",
        "X_train, X_test_valid, y_train, y_test_valid = train_test_split(X_valid, y_valid, test_size=0.2, random_state=1234)\n",
        "train_df1 = pd.merge(left=X_train, right=y_train, left_index=True, right_index=True)\n",
        "test_df1 = pd.merge(left=X_test_valid, right=y_test_valid, left_index=True, right_index=True)\n"
      ],
      "metadata": {
        "id": "gS1jkCjGfVhT"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xgbc = XGBClassifier()"
      ],
      "metadata": {
        "id": "vG40IDI_g2To"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xgbc.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aq2evbS2g2WZ",
        "outputId": "6dcc91d1-f335-41f8-b382-a7e52ae9ddbd"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier()"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "valid_pred = xgbc.predict(X_test_valid)"
      ],
      "metadata": {
        "id": "yZwSLTGYxYO_"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test_valid,valid_pred))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test_valid,valid_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ovUomZBuxhxH",
        "outputId": "9d33b47c-0ed3-42aa-d6e1-c44567c0cd39"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[35 11]\n",
            " [15 35]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.70      0.76      0.73        46\n",
            "           1       0.76      0.70      0.73        50\n",
            "\n",
            "    accuracy                           0.73        96\n",
            "   macro avg       0.73      0.73      0.73        96\n",
            "weighted avg       0.73      0.73      0.73        96\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_pred = xgbc.predict(X_test)"
      ],
      "metadata": {
        "id": "DedzgqXxW0U5"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test,test_pred))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test,test_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AUxASboYW0d3",
        "outputId": "9cc93217-7b22-4511-fc0f-b113a3085f8f"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[55 18]\n",
            " [ 7 40]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.75      0.81        73\n",
            "           1       0.69      0.85      0.76        47\n",
            "\n",
            "    accuracy                           0.79       120\n",
            "   macro avg       0.79      0.80      0.79       120\n",
            "weighted avg       0.81      0.79      0.79       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = confusion_matrix(y_test,test_pred)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=knn.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "4T4sMAqRXmhW",
        "outputId": "2579443c-cd5f-497e-df77-c95f36e514b9"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f83169dfc90>"
            ]
          },
          "metadata": {},
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AUC = metrics.roc_auc_score( y_test,test_pred)\n",
        "print('AUC',AUC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_lEhenAGTgxw",
        "outputId": "14876ffc-dd25-4621-fdf6-08d5d01bd8a6"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC 0.8022442436607403\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hyper tunning - על מנת למצוא את הפרמטרים האופטימליים למודל"
      ],
      "metadata": {
        "id": "HDJ-YQOeCfBC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid = {\n",
        "    \"max_depth\":[int(x) for x in np.linspace(start = 1, stop = 10, num = 1)],\n",
        "    \"n_estimators\" :[int(x) for x in np.linspace(start = 1, stop = 50, num = 10)],\n",
        "    #how quickly the model fits the residual errors by using additional base learners.\n",
        "    \"learning_rate\": [0.01,0.05,0.1,0.15,0.2],\n",
        "    # minimum loss reduction to create a new split\n",
        "    \"gamma\": [0,0.1,0.2,0.3,0.4,0.5],\n",
        "    #reg leaf weights respectively\n",
        "    \"reg_lambda\": [0,0.1,0.2,0.3,0.4,0.5],\n",
        "    #the ratio of number of negative class to the positive class\n",
        "    \"scale_pos_weight\": [1, 3, 5],\n",
        "    \"subsample\": [0.8],\n",
        "    \"colsample_bytree\": [0.5],\n",
        "}"
      ],
      "metadata": {
        "id": "r7U9qqbzhQxi"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Init classifier\n",
        "xgb_cl = XGBClassifier(objective=\"binary:logistic\")\n",
        "\n",
        "# Init Grid Search\n",
        "grid_cv = GridSearchCV(xgb_cl, param_grid, n_jobs=-1, cv=3, scoring=\"accuracy\")\n",
        "\n",
        "# Fit\n",
        "grid_cv.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dSj_PTVThi_M",
        "outputId": "6eccae64-23a2-4c53-d525-f6c9d1a61b81"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, estimator=XGBClassifier(), n_jobs=-1,\n",
              "             param_grid={'colsample_bytree': [0.5],\n",
              "                         'gamma': [0, 0.1, 0.2, 0.3, 0.4, 0.5],\n",
              "                         'learning_rate': [0.01, 0.05, 0.1, 0.15, 0.2],\n",
              "                         'max_depth': [1],\n",
              "                         'n_estimators': [1, 6, 11, 17, 22, 28, 33, 39, 44, 50],\n",
              "                         'reg_lambda': [0, 0.1, 0.2, 0.3, 0.4, 0.5],\n",
              "                         'scale_pos_weight': [1, 3, 5], 'subsample': [0.8]},\n",
              "             scoring='accuracy')"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_cv.best_params_"
      ],
      "metadata": {
        "id": "DzbxCe1ihjCw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39baf789-acfd-492e-a98e-bd6c41ff0756"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'colsample_bytree': 0.5,\n",
              " 'gamma': 0,\n",
              " 'learning_rate': 0.2,\n",
              " 'max_depth': 1,\n",
              " 'n_estimators': 50,\n",
              " 'reg_lambda': 0.2,\n",
              " 'scale_pos_weight': 1,\n",
              " 'subsample': 0.8}"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prediction = grid_cv.predict(X_test_valid)"
      ],
      "metadata": {
        "id": "dOYgTnY8hjGS"
      },
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test_valid,prediction))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test_valid,prediction))"
      ],
      "metadata": {
        "id": "oMisfqZWlL00",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a760b9f-92b3-4d98-a210-9a9b576b6dc4"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[37  9]\n",
            " [13 37]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.74      0.80      0.77        46\n",
            "           1       0.80      0.74      0.77        50\n",
            "\n",
            "    accuracy                           0.77        96\n",
            "   macro avg       0.77      0.77      0.77        96\n",
            "weighted avg       0.77      0.77      0.77        96\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = grid_cv.predict(X_test)"
      ],
      "metadata": {
        "id": "RRc8S7yIlL30"
      },
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test,y_pred))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "id": "_wFgryADg2Zm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4116a72a-1b89-4f3f-c096-59e961d73b0d"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[52 21]\n",
            " [14 33]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.71      0.75        73\n",
            "           1       0.61      0.70      0.65        47\n",
            "\n",
            "    accuracy                           0.71       120\n",
            "   macro avg       0.70      0.71      0.70       120\n",
            "weighted avg       0.72      0.71      0.71       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "גם לאחר הרצת המודל עם הפרמטרים האופטימליים נראה כי יערות רנדומיים עדיין נותן ביצועים טובים יותר בחיזוי כיוון ההגירה \n",
        "\n",
        "**כעת נמצא את הפרמטרים האופטימליים של מודל יערות רנדומיים**"
      ],
      "metadata": {
        "id": "_XYUGJEVCrBK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV"
      ],
      "metadata": {
        "id": "bOS6c5w5pHS5"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Randomized Search CV\n",
        "\n",
        "# Number of trees in random forest\n",
        "n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n",
        "# Number of features to consider at every split\n",
        "max_features = ['auto', 'sqrt']\n",
        "# Maximum number of levels in tree\n",
        "max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n",
        "# Minimum number of samples required to split a node\n",
        "min_samples_split = [2, 5, 10, 15, 100]\n",
        "# Minimum number of samples required at each leaf node\n",
        "min_samples_leaf = [1, 2, 5, 10]"
      ],
      "metadata": {
        "id": "u4EffKVApKcr"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random_grid = {'n_estimators': n_estimators,\n",
        "               'max_features': max_features,\n",
        "               'max_depth': max_depth,\n",
        "               'min_samples_split': min_samples_split,\n",
        "               'min_samples_leaf': min_samples_leaf}"
      ],
      "metadata": {
        "id": "H16ijalupKiw"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_random = RandomizedSearchCV(estimator = rfc, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)"
      ],
      "metadata": {
        "id": "U7aKbmNgpHVv"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_random.fit(X_train,y_train)"
      ],
      "metadata": {
        "id": "ZOP-Md6zpHaB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc559d88-4883-4f24-e742-cdc2b726e6e9"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n",
            "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   2.0s\n",
            "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   1.9s\n",
            "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   1.8s\n",
            "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   1.9s\n",
            "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   1.9s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   2.4s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   2.4s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   2.4s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   2.3s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   3.1s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.5s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.5s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.5s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.5s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.5s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   0.8s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   0.8s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   0.8s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   0.8s\n",
            "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   0.8s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   1.3s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   1.4s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   1.3s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   1.3s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   1.3s\n",
            "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   2.2s\n",
            "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   2.2s\n",
            "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   2.3s\n",
            "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   2.2s\n",
            "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   2.2s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.2s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.0s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.0s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.0s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.1s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   0.7s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   0.7s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   0.7s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   0.6s\n",
            "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   0.6s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.4s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.4s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.4s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.4s\n",
            "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.4s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   1.5s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   1.5s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   1.5s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   1.5s\n",
            "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   1.5s\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=5,\n",
              "                   estimator=RandomForestClassifier(criterion='entropy',\n",
              "                                                    n_estimators=22),\n",
              "                   n_jobs=1,\n",
              "                   param_distributions={'max_depth': [5, 10, 15, 20, 25, 30],\n",
              "                                        'max_features': ['auto', 'sqrt'],\n",
              "                                        'min_samples_leaf': [1, 2, 5, 10],\n",
              "                                        'min_samples_split': [2, 5, 10, 15,\n",
              "                                                              100],\n",
              "                                        'n_estimators': [100, 200, 300, 400,\n",
              "                                                         500, 600, 700, 800,\n",
              "                                                         900, 1000, 1100,\n",
              "                                                         1200]},\n",
              "                   random_state=42, scoring='neg_mean_squared_error',\n",
              "                   verbose=2)"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_random.best_params_"
      ],
      "metadata": {
        "id": "32klKeVapHcq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f814bc0-1f5b-49b3-eb4d-7c35e4c83762"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'max_depth': 25,\n",
              " 'max_features': 'sqrt',\n",
              " 'min_samples_leaf': 1,\n",
              " 'min_samples_split': 2,\n",
              " 'n_estimators': 1000}"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prediction = rf_random.predict(X_test)"
      ],
      "metadata": {
        "id": "qm47BWdXqZVr"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test,prediction))\n",
        "print('----------------------------------------------------------')\n",
        "print(classification_report(y_test,prediction))"
      ],
      "metadata": {
        "id": "2B3tCiYeqZZ_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fd513576-4c50-44a9-dfdd-7c82f24c41ad"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[60 13]\n",
            " [ 7 40]]\n",
            "----------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.82      0.86        73\n",
            "           1       0.75      0.85      0.80        47\n",
            "\n",
            "    accuracy                           0.83       120\n",
            "   macro avg       0.83      0.84      0.83       120\n",
            "weighted avg       0.84      0.83      0.83       120\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = confusion_matrix(y_test,prediction)\n",
        "disp = ConfusionMatrixDisplay(confusion, display_labels=knn.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "UrMyZeowJrxY",
        "outputId": "6f9cd423-de89-4d2d-d5c1-0659b2f0d940"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f830d40f250>"
            ]
          },
          "metadata": {},
          "execution_count": 131
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AUC = metrics.roc_auc_score( y_test,prediction)\n",
        "print('AUC',AUC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SbpeDL9rXsku",
        "outputId": "230c4965-2a5d-42af-86de-0b2edae042f2"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC 0.836490819003206\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "הצלחנו להעלות את דיוק המודל מ - 0.82 ל 0.83 \n",
        "\n",
        "כעת ברצוננו לבחון איך הפיצ'רים משפיעים על המודל\n",
        "\n",
        "#**Feature importance**"
      ],
      "metadata": {
        "id": "eolOjPnoD24j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = RandomForestClassifier(max_depth= 25, max_features= 'sqrt', min_samples_leaf= 1, min_samples_split= 2, n_estimators= 1000,criterion='entropy')\n",
        "model.fit(X_test,y_test)\n",
        "feat_importances_df = pd.DataFrame({'feature_importance':model.feature_importances_}, index=X.columns)\n",
        "feat_importances_df=feat_importances_df.sort_values(by='feature_importance', ascending=False)\n",
        "feat_importances_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "Xkz0wZE8FIT0",
        "outputId": "0ea3dff8-942e-4e22-9c9d-d0ef339eb60d"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                feature_importance\n",
              "Gini Index of Inequality Index 0 Full Equality            0.105808\n",
              "Percentage of eligible for a Bagrut                       0.087946\n",
              "Total income from the government                          0.081835\n",
              "Education                                                 0.076037\n",
              "Total income                                              0.074786\n",
              "Surplus or deficit per year                               0.073584\n",
              "Average per capita expenditure in NIS                     0.073556\n",
              "Total expenses                                            0.073475\n",
              "Development Work                                          0.071772\n",
              "Welfare                                                   0.071141\n",
              "Rates collection                                          0.063275\n",
              "Percentage of accumulated deficit from income             0.055960\n",
              "Socioeconomic cluster from 1 to 10 lowest 1               0.049193\n",
              "Compactness Cluster from 1 to 10 1 highest                0.041630"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17322403-d6aa-47ca-8659-1d567b5d0ad6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_importance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Gini Index of Inequality Index 0 Full Equality</th>\n",
              "      <td>0.105808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentage of eligible for a Bagrut</th>\n",
              "      <td>0.087946</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total income from the government</th>\n",
              "      <td>0.081835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Education</th>\n",
              "      <td>0.076037</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total income</th>\n",
              "      <td>0.074786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Surplus or deficit per year</th>\n",
              "      <td>0.073584</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Average per capita expenditure in NIS</th>\n",
              "      <td>0.073556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total expenses</th>\n",
              "      <td>0.073475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Development Work</th>\n",
              "      <td>0.071772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Welfare</th>\n",
              "      <td>0.071141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rates collection</th>\n",
              "      <td>0.063275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Percentage of accumulated deficit from income</th>\n",
              "      <td>0.055960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Socioeconomic cluster from 1 to 10 lowest 1</th>\n",
              "      <td>0.049193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Compactness Cluster from 1 to 10 1 highest</th>\n",
              "      <td>0.041630</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17322403-d6aa-47ca-8659-1d567b5d0ad6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-17322403-d6aa-47ca-8659-1d567b5d0ad6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-17322403-d6aa-47ca-8659-1d567b5d0ad6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "נראה כי כל הפיצ'רים תורמים ליעילות המודל"
      ],
      "metadata": {
        "id": "p7EkerWlEbI6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**מסקנות**"
      ],
      "metadata": {
        "id": "e2Ux7K6bEguN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# We would recommend to municipalities that wish to attract residents to consider:\n",
        "# tax or rate discounts policy - The Gini index examines the gap, in terms of the net income per standard person.\n",
        "# Encourage government funding\n",
        "# allocate more resources for educational purposes with emphasis on Bagrut exams and welfare\n"
      ],
      "metadata": {
        "id": "zCOMO2YgqZcv"
      },
      "execution_count": 105,
      "outputs": []
    }
  ]
}